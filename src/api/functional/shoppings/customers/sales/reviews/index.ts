/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.sales.reviews
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingSaleReview } from "../../../../../structures/shoppings/sales/inquiries/IShoppingSaleReview";

export * as comments from "./comments";

/**
 * Write a review article.
 *
 * When a {@link IShoppingCustomer customer} has purchased a specific
 * {@link IShoppingSale sale} and get {@link IShoppingDelivery delivered} it,
 * he/she can write a {@link IShoppingSaleReview review} article about the sale.
 *
 * If try to write a review article without purchasing or the delivery has not
 * been completed, 428 unprocessable entity error would be thrown. Also, the
 * customer can write multiple review articles per an order, but the next
 * article can be written after 2 weeks from the previous article. If not,
 * 428 unprocessable entity error would be thrown, either.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Creation info of the review
 * @returns Newly created review
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleReviewController.create
 * @path POST /shoppings/customers/sales/:saleId/reviews
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  input: IShoppingSaleReview.ICreate,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(saleId),
    },
    input,
  );
}
export namespace create {
  export type Input = IShoppingSaleReview.ICreate;
  export type Output = IShoppingSaleReview;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/customers/sales/:saleId/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (saleId: string & Format<"uuid">) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/reviews`;
}

/**
 * Update a review.
 *
 * Updadte a {@link IShoppingSaleReview review}'s content and score.
 *
 * By the way, as is the general policy of this shopping mall regarding
 * articles, modifying a question articles does not actually change the
 * existing content. Modified content is accumulated and recorded in the
 * existing article record as a new
 * {@link IShoppingSaleReview.ISnapshot snapshot}. And this is made public
 * to everyone, including the {@link IShoppingCustomer customer} and the
 * {@link IShoppingSeller seller}, and anyone who can view the article can
 * also view the entire editing histories.
 *
 * This is to prevent customers or sellers from modifying their articles and
 * manipulating the circumstances due to the nature of e-commerce, where
 * disputes easily arise. That is, to preserve evidence.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target review's {@link IShoppingSaleReview.id }
 * @param input Update info of the review
 * @returns Newly created snapshot record of the review
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleReviewController.update
 * @path POST /shoppings/customers/sales/:saleId/reviews/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  id: string & Format<"uuid">,
  input: IShoppingSaleReview.IUpdate,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(saleId, id),
    },
    input,
  );
}
export namespace update {
  export type Input = IShoppingSaleReview.IUpdate;
  export type Output = IShoppingSaleReview.ISnapshot;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/customers/sales/:saleId/reviews/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (
    saleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/reviews/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * List up every summarized reviews.
 *
 * List up every {@link IShoppingSaleReview.ISummary summarized reviews} of a
 * {@link IShoppingSale sale}.
 *
 * As you can see, returned reviews are summarized, not detailed. If you want
 * to get the detailed information of a review, use {@link adridges} function
 * or {@link at} function for each article.
 *
 * Also, returned review has {@link IShoppingSaleReview.ISummary.answer}
 * property which means the formal answer from the {@link IShoppingSeller}.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s reviews. Otherwise,
 * you can access to every reviews of the sales.
 *
 * By the way, if you want, you can limit the result by configuring
 * {@link IShoppingSaleReview.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated reviews with summarized information
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleReviewController.index
 * @path PATCH /shoppings/customers/sales/:saleId/reviews
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  input: IShoppingSaleReview.IRequest,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(saleId),
    },
    input,
  );
}
export namespace index {
  export type Input = IShoppingSaleReview.IRequest;
  export type Output = IPage<IShoppingSaleReview.ISummary>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/sales/:saleId/reviews",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (saleId: string & Format<"uuid">) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/reviews`;
}

/**
 * List up every abridged reviews.
 *
 * List up every {@link IShoppingSaleReview.IAbridge abridged reviews} of
 * a {@link IShoppingSale sale}.
 *
 * As you can see, returned reviews are abridged, not detailed. If you want
 * to get the detailed information of a review, use {@link at} function
 * for each article.
 *
 * Also, returned review has {@link IShoppingSaleReview.IAridge.answer}
 * property which means the formal answer from the {@link IShoppingSeller}.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s reviews. Otherwise,
 * you can access to every reviews of the sales.
 *
 * By the way, if you want, you can limit the result by configuring
 * {@link IShoppingSaleReview.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingSaleReview.IRequest.sort sort condition}.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated reviews with abridged information
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleReviewController.abridges
 * @path PATCH /shoppings/customers/sales/:saleId/reviews/abridges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function abridges(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  input: IShoppingSaleReview.IRequest,
): Promise<abridges.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...abridges.METADATA,
      template: abridges.METADATA.path,
      path: abridges.path(saleId),
    },
    input,
  );
}
export namespace abridges {
  export type Input = IShoppingSaleReview.IRequest;
  export type Output = IPage<IShoppingSaleReview.IAbridge>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/sales/:saleId/reviews/abridges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (saleId: string & Format<"uuid">) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/reviews/abridges`;
}

/**
 * Get a review info.
 *
 * Get a detailed {@link IShoppingSaleReview review} information of a
 * {@link IShoppingSale sale}.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s review. Otherwise
 * you are a {@link IShoppingCustomer customer}, you can access to every
 * reviews of the sales.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target review's {@link IShoppingSaleReview.id }
 * @returns Detailed review info
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleReviewController.at
 * @path GET /shoppings/customers/sales/:saleId/reviews/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  id: string & Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(saleId, id),
  });
}
export namespace at {
  export type Output = IShoppingSaleReview;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/sales/:saleId/reviews/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    saleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/reviews/${encodeURIComponent(id?.toString() ?? "null")}`;
}
