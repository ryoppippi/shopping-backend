/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.sales.questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IBbsArticle } from "../../../../../structures/common/IBbsArticle";
import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingSaleQuestion } from "../../../../../structures/shoppings/sales/inquiries/IShoppingSaleQuestion";
import { NestiaSimulator } from "../../../../../utils/NestiaSimulator";

export * as comments from "./comments";

/**
 * Write a question article.
 * 
 * When a {@link IShoppingCustomer customer} wants to ask something about
 * a specific {@link IShoppingSale sale}, he/she can ask it by writing a
 * new {@link IShoppingSaleQuestion question article}.
 * 
 * If the customer does not want to reveal his/her identify and question,
 * he/she can write the question as a secret article. In that case, only
 * the customer and the related {@link IShoppingSeller seller} can see
 * the {@link at detailed content}. Also, such secret question's title and
 * writer name would be masked with `*` characters in the
 * {@link index pagiation API}.
 * 
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Create info of the question
 * @returns Newly created question
 * @tag Inquiry
 * @author Samchon
 * 
 * @controller ShoppingCustomerSaleQuestionController.create
 * @path POST /shoppings/customers/sales/:saleId/questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    saleId: string & Format<"uuid">,
    input: create.Input,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              saleId,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...create.METADATA,
                  path: create.path(saleId),
              } as const,
              input,
          );
}
export namespace create {
    export type Input = Primitive<IShoppingSaleQuestion.ICreate>;
    export type Output = Primitive<IShoppingSaleQuestion>;

    export const METADATA = {
        method: "POST",
        path: "/shoppings/customers/sales/:saleId/questions",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (saleId: string & Format<"uuid">): string => {
        return `/shoppings/customers/sales/${encodeURIComponent(saleId ?? "null")}/questions`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingSaleQuestion> =>
        typia.random<Primitive<IShoppingSaleQuestion>>(g);
    export const simulate = async (
        connection: IConnection,
        saleId: string & Format<"uuid">,
        input: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(saleId),
            contentType: "application/json",
        });
        assert.param("saleId")(() => typia.assert(saleId));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Update a question.
 * 
 * Update a {@link IShoppingSaleQuestion question}'s content.
 * 
 * By the way, as is the general policy of this shopping mall regarding
 * articles, modifying a question articles does not actually change the
 * existing content. Modified content is accumulated and recorded in the
 * existing article record as a new
 * {@link IShoppingSaleQuestion.ISnapshot snapshot}. And this is made public
 * to everyone, including the {@link IShoppingCustomer customer} and the
 * {@link IShoppingSeller seller}, and anyone who can view the article can
 * also view the entire editing histories.
 * 
 * This is to prevent customers or sellers from modifying their articles and
 * manipulating the circumstances due to the nature of e-commerce, where
 * disputes easily arise. That is, to preserve evidence.
 * 
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target question's {@link IShoppingSaleQuestion.id}
 * @param input Update info of the question
 * @returns Newly created snapshot record of the question
 * @tag Inquiry
 * @author Samchon
 * 
 * @controller ShoppingCustomerSaleQuestionController.update
 * @path POST /shoppings/customers/sales/:saleId/questions/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    saleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
    input: update.Input,
): Promise<update.Output> {
    return !!connection.simulate
        ? update.simulate(
              connection,
              saleId,
              id,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...update.METADATA,
                  path: update.path(saleId, id),
              } as const,
              input,
          );
}
export namespace update {
    export type Input = Primitive<IBbsArticle.ICreate>;
    export type Output = Primitive<IBbsArticle.ISnapshot>;

    export const METADATA = {
        method: "POST",
        path: "/shoppings/customers/sales/:saleId/questions/:id",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (saleId: string & Format<"uuid">, id: string & Format<"uuid">): string => {
        return `/shoppings/customers/sales/${encodeURIComponent(saleId ?? "null")}/questions/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IBbsArticle.ISnapshot> =>
        typia.random<Primitive<IBbsArticle.ISnapshot>>(g);
    export const simulate = async (
        connection: IConnection,
        saleId: string & Format<"uuid">,
        id: string & Format<"uuid">,
        input: update.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(saleId, id),
            contentType: "application/json",
        });
        assert.param("saleId")(() => typia.assert(saleId));
        assert.param("id")(() => typia.assert(id));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerSaleQuestionController.index
 * @path PATCH /shoppings/customers/sales/:saleId/questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    saleId: string & Format<"uuid">,
    input: index.Input,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              saleId,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...index.METADATA,
                  path: index.path(saleId),
              } as const,
              input,
          );
}
export namespace index {
    export type Input = Primitive<IShoppingSaleQuestion.IRequest>;
    export type Output = Primitive<IPage<IShoppingSaleQuestion.ISummary>>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/customers/sales/:saleId/questions",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (saleId: string & Format<"uuid">): string => {
        return `/shoppings/customers/sales/${encodeURIComponent(saleId ?? "null")}/questions`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IShoppingSaleQuestion.ISummary>> =>
        typia.random<Primitive<IPage<IShoppingSaleQuestion.ISummary>>>(g);
    export const simulate = async (
        connection: IConnection,
        saleId: string & Format<"uuid">,
        input: index.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(saleId),
            contentType: "application/json",
        });
        assert.param("saleId")(() => typia.assert(saleId));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerSaleQuestionController.abridges
 * @path PATCH /shoppings/customers/sales/:saleId/questions/abridges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function abridges(
    connection: IConnection,
    saleId: string & Format<"uuid">,
    input: abridges.Input,
): Promise<abridges.Output> {
    return !!connection.simulate
        ? abridges.simulate(
              connection,
              saleId,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...abridges.METADATA,
                  path: abridges.path(saleId),
              } as const,
              input,
          );
}
export namespace abridges {
    export type Input = Primitive<IShoppingSaleQuestion.IRequest>;
    export type Output = Primitive<IPage<IShoppingSaleQuestion.IAbridge>>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/customers/sales/:saleId/questions/abridges",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (saleId: string & Format<"uuid">): string => {
        return `/shoppings/customers/sales/${encodeURIComponent(saleId ?? "null")}/questions/abridges`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IShoppingSaleQuestion.IAbridge>> =>
        typia.random<Primitive<IPage<IShoppingSaleQuestion.IAbridge>>>(g);
    export const simulate = async (
        connection: IConnection,
        saleId: string & Format<"uuid">,
        input: abridges.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(saleId),
            contentType: "application/json",
        });
        assert.param("saleId")(() => typia.assert(saleId));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerSaleQuestionController.at
 * @path GET /shoppings/customers/sales/:saleId/questions/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    saleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              saleId,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(saleId, id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IShoppingSaleQuestion>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/sales/:saleId/questions/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (saleId: string & Format<"uuid">, id: string & Format<"uuid">): string => {
        return `/shoppings/customers/sales/${encodeURIComponent(saleId ?? "null")}/questions/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingSaleQuestion> =>
        typia.random<Primitive<IShoppingSaleQuestion>>(g);
    export const simulate = async (
        connection: IConnection,
        saleId: string & Format<"uuid">,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(saleId, id),
            contentType: "application/json",
        });
        assert.param("saleId")(() => typia.assert(saleId));
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}