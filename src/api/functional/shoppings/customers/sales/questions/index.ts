/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.sales.questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { IBbsArticle } from "../../../../../structures/common/IBbsArticle";
import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingSaleQuestion } from "../../../../../structures/shoppings/sales/inquiries/IShoppingSaleQuestion";

export * as comments from "./comments";

/**
 * Write a question article.
 *
 * When a {@link IShoppingCustomer customer} wants to ask something about
 * a specific {@link IShoppingSale sale}, he/she can ask it by writing a
 * new {@link IShoppingSaleQuestion question article}.
 *
 * If the customer does not want to reveal his/her identify and question,
 * he/she can write the question as a secret article. In that case, only
 * the customer and the related {@link IShoppingSeller seller} can see
 * the {@link at detailed content}. Also, such secret question's title and
 * writer name would be masked with `*` characters in the
 * {@link index pagiation API}.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Creation info of the question
 * @returns Newly created question
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleQuestionController.create
 * @path POST /shoppings/customers/sales/:saleId/questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  input: IShoppingSaleQuestion.ICreate,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(saleId),
    },
    input,
  );
}
export namespace create {
  export type Input = IShoppingSaleQuestion.ICreate;
  export type Output = IShoppingSaleQuestion;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/customers/sales/:saleId/questions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (saleId: string & Format<"uuid">) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions`;
}

/**
 * Update a question.
 *
 * Update a {@link IShoppingSaleQuestion question}'s content.
 *
 * By the way, as is the general policy of this shopping mall regarding
 * articles, modifying a question articles does not actually change the
 * existing content. Modified content is accumulated and recorded in the
 * existing article record as a new
 * {@link IShoppingSaleQuestion.ISnapshot snapshot}. And this is made public
 * to everyone, including the {@link IShoppingCustomer customer} and the
 * {@link IShoppingSeller seller}, and anyone who can view the article can
 * also view the entire editing histories.
 *
 * This is to prevent customers or sellers from modifying their articles and
 * manipulating the circumstances due to the nature of e-commerce, where
 * disputes easily arise. That is, to preserve evidence.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target question's {@link IShoppingSaleQuestion.id }
 * @param input Update info of the question
 * @returns Newly created snapshot record of the question
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleQuestionController.update
 * @path POST /shoppings/customers/sales/:saleId/questions/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  id: string & Format<"uuid">,
  input: IBbsArticle.ICreate,
): Promise<update.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(saleId, id),
    },
    input,
  );
}
export namespace update {
  export type Input = IBbsArticle.ICreate;
  export type Output = IBbsArticle.ISnapshot;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/customers/sales/:saleId/questions/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (
    saleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * List up every summarized questions.
 *
 * List up every {@link IShoppingSaleQuestion.ISummary summarized questions} of a
 * {@link IShoppingSale sale}.
 *
 * As you can see, returned questions are summarized, not detailed. If you want
 * to get the detailed information of a question, use {@link adridges} function
 * or {@link at} function for each article.
 *
 * Also, returned question has {@link IShoppingSaleQuestion.ISummary.answer}
 * property which means the formal answer from the {@link IShoppingSeller}.
 * Additionally, returned question has another special property
 * {@link IShoppingSaleQuestion.ISummary.secret} with masking to other
 * principle properties, and it means only related actors can {@link at read}
 * the question.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s questions. Otherwise,
 * you can access to every questions of the sales.
 *
 * By the way, if you want, you can limit the result by configuring
 * {@link IShoppingSaleQuestion.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated questions with summarized information
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleQuestionController.index
 * @path PATCH /shoppings/customers/sales/:saleId/questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  input: IShoppingSaleQuestion.IRequest,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(saleId),
    },
    input,
  );
}
export namespace index {
  export type Input = IShoppingSaleQuestion.IRequest;
  export type Output = IPage<IShoppingSaleQuestion.ISummary>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/sales/:saleId/questions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (saleId: string & Format<"uuid">) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions`;
}

/**
 * List up every abridged questions.
 *
 * List up every {@link IShoppingSaleQuestion.IAbridge abridged questions} of
 * a {@link IShoppingSale sale}.
 *
 * As you can see, returned questions are abridged, not detailed. If you want
 * to get the detailed information of a question, use {@link at} function
 * for each article.
 *
 * Also, returned question has {@link IShoppingSaleQuestion.IAridge.answer}
 * property which means the formal answer from the {@link IShoppingSeller}.
 * Additionally, returned question has another special property
 * {@link IShoppingSaleQuestion.IAridge.secret} with masking to other
 * principle properties, and it means only related actors can {@link at read}
 * the question.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s questions. Otherwise,
 * you can access to every questions of the sales.
 *
 * By the way, if you want, you can limit the result by configuring
 * {@link IShoppingSaleQuestion.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated questions with abridged information
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleQuestionController.abridges
 * @path PATCH /shoppings/customers/sales/:saleId/questions/abridges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function abridges(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  input: IShoppingSaleQuestion.IRequest,
): Promise<abridges.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...abridges.METADATA,
      template: abridges.METADATA.path,
      path: abridges.path(saleId),
    },
    input,
  );
}
export namespace abridges {
  export type Input = IShoppingSaleQuestion.IRequest;
  export type Output = IPage<IShoppingSaleQuestion.IAbridge>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/sales/:saleId/questions/abridges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (saleId: string & Format<"uuid">) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions/abridges`;
}

/**
 * Get a question info.
 *
 * Get a detailed {@link IShoppingSaleQuestion question} information of a
 * {@link IShoppingSale sale}.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s question. Otherwise
 * you are a {@link IShoppingCustomer customer}, you can access to every
 * questions of the sales except the {@link IShoppingSaleQuestion.secret}
 * value is `false`.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target question's {@link IShoppingSaleQuestion.id }
 * @returns Detailed question info
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingCustomerSaleQuestionController.at
 * @path GET /shoppings/customers/sales/:saleId/questions/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  id: string & Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(saleId, id),
  });
}
export namespace at {
  export type Output = IShoppingSaleQuestion;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/sales/:saleId/questions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    saleId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/customers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions/${encodeURIComponent(id?.toString() ?? "null")}`;
}
