/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.orders.goods
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import { NestiaSimulator } from "../../../../../utils/NestiaSimulator";

/**
 * Confirm an order good.
 * 
 * Confirm an {@link IShoppingOrderGood order good} that has been
 * completed {@link IShoppingDelivery delivering} to the
 * {@link IShoppingCustomer customer}.
 * 
 * In other words, belonged {@link IShoppingOrder order} must be
 * {@link IShoppingPublish.paid_at published, paid} and delivery of
 * the good must be {@link IShoppingDeliveryJourney arrived} to the
 * customer. If not, 428 unprocessable entity error would be thrown.
 * 
 * @param orderId Belonged order's {@link IShoppingOrder.id }
 * @param id Target good's {@link IShoppingOrderGood.id }
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderGoodController.confirm
 * @path PUT /shoppings/customers/orders/:orderId/goods/:id/confirm
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function confirm(
    connection: IConnection,
    orderId: string & Format<"uuid">,
    id: string & Format<"uuid">,
): Promise<void> {
    return !!connection.simulate
        ? confirm.simulate(
              connection,
              orderId,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...confirm.METADATA,
                  path: confirm.path(orderId, id),
              } as const,
          );
}
export namespace confirm {

    export const METADATA = {
        method: "PUT",
        path: "/shoppings/customers/orders/:orderId/goods/:id/confirm",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (orderId: string & Format<"uuid">, id: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(orderId ?? "null")}/goods/${encodeURIComponent(id ?? "null")}/confirm`;
    }
    export const simulate = async (
        connection: IConnection,
        orderId: string & Format<"uuid">,
        id: string & Format<"uuid">,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(orderId, id),
            contentType: "application/json",
        });
        assert.param("orderId")(() => typia.assert(orderId));
        assert.param("id")(() => typia.assert(id));
    }
}