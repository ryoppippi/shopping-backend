/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.orders.goods
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { tags } from "typia";

/**
 * Confirm an order good.
 *
 * Confirm an {@link IShoppingOrderGood order good} that has been
 * completed {@link IShoppingDelivery delivering} to the
 * {@link IShoppingCustomer customer}.
 *
 * In other words, belonged {@link IShoppingOrder order} must be
 * {@link IShoppingPublish.paid_at published, paid} and delivery of
 * the good must be {@link IShoppingDeliveryJourney arrived} to the
 * customer. If not, 428 unprocessable entity error would be thrown.
 *
 * @param orderId Belonged order's {@link IShoppingOrder.id }
 * @param id Target good's {@link IShoppingOrderGood.id }
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingCustomerOrderGoodController.confirm
 * @path PUT /shoppings/customers/orders/:orderId/goods/:id/confirm
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function confirm(
  connection: IConnection,
  orderId: string & tags.Format<"uuid">,
  id: string & tags.Format<"uuid">,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...confirm.METADATA,
    template: confirm.METADATA.path,
    path: confirm.path(orderId, id),
  });
}
export namespace confirm {
  export const METADATA = {
    method: "PUT",
    path: "/shoppings/customers/orders/:orderId/goods/:id/confirm",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    orderId: string & tags.Format<"uuid">,
    id: string & tags.Format<"uuid">,
  ) =>
    `/shoppings/customers/orders/${encodeURIComponent(orderId?.toString() ?? "null")}/goods/${encodeURIComponent(id?.toString() ?? "null")}/confirm`;
}
