/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.orders.publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IShoppingOrderPublish } from "../../../../../structures/shoppings/orders/IShoppingOrderPublish";
import { NestiaSimulator } from "../../../../../utils/NestiaSimulator";

/**
 * Check publishable.
 * 
 * Test whether the {@link IShoppingOrder order} is publishable or not.
 * 
 * If the order has not been {@link IShoppingOrderPublish published} and
 * not deleted yet, then it is possible to publish the order. Even thouogh
 * target {@link IShoppingSale sale} is suspended or
 * {@link IShoppingSaleUnitStockInventory out of stock}, it is still possible
 * to publish because the order already has been applied.
 * 
 * @param orderId Target order's {@link IShoppingOrder.id }
 * @returns Whether the order is publishable or not
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderPublishController.able
 * @path GET /shoppings/customers/orders/:orderId/publish/able
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function able(
    connection: IConnection,
    orderId: string & Format<"uuid">,
): Promise<able.Output> {
    return !!connection.simulate
        ? able.simulate(
              connection,
              orderId,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...able.METADATA,
                  path: able.path(orderId),
              } as const,
          );
}
export namespace able {
    export type Output = Primitive<false | true>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/orders/:orderId/publish/able",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (orderId: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(orderId ?? "null")}/publish/able`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<false | true> =>
        typia.random<Primitive<false | true>>(g);
    export const simulate = async (
        connection: IConnection,
        orderId: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(orderId),
            contentType: "application/json",
        });
        assert.param("orderId")(() => typia.assert(orderId));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Publish an order.
 * 
 * {@link IShoppingOrderPublish Publish} an {@link IShoppingOrder order} that
 * has been applied by the {@link IShoppingCustomer } with
 * {@link IShoppingAddress address} to delivery and payment info gotten from
 * the payment vendor system.
 * 
 * If the order has been discounted for entire order price, then no need
 * to send payment vendor info. Instead, only address info is required.
 * 
 * Also, the payment time can be different with the publish time. For example,
 * if the payment method is manual bank account transfer, then the payment
 * would be delayed until the customer actually transfer the money. In that
 * case, {@link IShoppingOrderPublish.paid_at } would be `null` value, so
 * that you have to check it after calling this publish function.
 * 
 * @param orderId Target order's {@link IShoppingOrder.id }
 * @param input Create info of the publish
 * @returns Newly created publish
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderPublishController.create
 * @path POST /shoppings/customers/orders/:orderId/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    orderId: string & Format<"uuid">,
    input: create.Input,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              orderId,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...create.METADATA,
                  path: create.path(orderId),
              } as const,
              input,
          );
}
export namespace create {
    export type Input = Primitive<IShoppingOrderPublish.ICreate>;
    export type Output = Primitive<IShoppingOrderPublish>;

    export const METADATA = {
        method: "POST",
        path: "/shoppings/customers/orders/:orderId/publish",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (orderId: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(orderId ?? "null")}/publish`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrderPublish> =>
        typia.random<Primitive<IShoppingOrderPublish>>(g);
    export const simulate = async (
        connection: IConnection,
        orderId: string & Format<"uuid">,
        input: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(orderId),
            contentType: "application/json",
        });
        assert.param("orderId")(() => typia.assert(orderId));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Cancel the publish (payment).
 * 
 * Cancel payment of an {@link IShoppingOrder order} that has been
 * {@link IShoppingOrderPublish published}.
 * 
 * If target publish's payment method is manual bank account transfer,
 * then it would be cancelled directly. If not, then payment cancel
 * request would be sent to the payment vendor system.
 * 
 * @param orderId Target order's {@link IShoppingOrder.id }
 * @tag Ordere
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderPublishController.cancel
 * @path DELETE /shoppings/customers/orders/:orderId/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function cancel(
    connection: IConnection,
    orderId: string & Format<"uuid">,
): Promise<void> {
    return !!connection.simulate
        ? cancel.simulate(
              connection,
              orderId,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...cancel.METADATA,
                  path: cancel.path(orderId),
              } as const,
          );
}
export namespace cancel {

    export const METADATA = {
        method: "DELETE",
        path: "/shoppings/customers/orders/:orderId/publish",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (orderId: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(orderId ?? "null")}/publish`;
    }
    export const simulate = async (
        connection: IConnection,
        orderId: string & Format<"uuid">,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(orderId),
            contentType: "application/json",
        });
        assert.param("orderId")(() => typia.assert(orderId));
    }
}