/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.orders.publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { tags } from "typia";

import type { IShoppingOrderPublish } from "../../../../../structures/shoppings/orders/IShoppingOrderPublish";

/**
 * Check publishable.
 *
 * Test whether the {@link IShoppingOrder order} is publishable or not.
 *
 * If the order has not been {@link IShoppingOrderPublish published} and
 * not deleted yet, then it is possible to publish the order. Even thouogh
 * target {@link IShoppingSale sale} is suspended or
 * {@link IShoppingSaleUnitStockInventory out of stock}, it is still possible
 * to publish because the order already has been applied.
 *
 * @param orderId Target order's {@link IShoppingOrder.id }
 * @returns Whether the order is publishable or not
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingCustomerOrderPublishController.able
 * @path GET /shoppings/customers/orders/:orderId/publish/able
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function able(
  connection: IConnection,
  orderId: string & tags.Format<"uuid">,
): Promise<able.Output> {
  return PlainFetcher.fetch(connection, {
    ...able.METADATA,
    template: able.METADATA.path,
    path: able.path(orderId),
  });
}
export namespace able {
  export type Output = boolean;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/orders/:orderId/publish/able",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (orderId: string & tags.Format<"uuid">) =>
    `/shoppings/customers/orders/${encodeURIComponent(orderId?.toString() ?? "null")}/publish/able`;
}

/**
 * Publish an order.
 *
 * {@link IShoppingOrderPublish Publish} an {@link IShoppingOrder order} that
 * has been applied by the {@link IShoppingCustomer} with
 * {@link IShoppingAddress address} to delivery and payment information gotten
 * from the payment vendor system.
 *
 * If the order has been discounted for entire order price, then no need
 * to send payment vendor info. Instead, only address info is required.
 *
 * Also, the payment time can be different with the publish time. For example,
 * if the payment method is manual bank account transfer, then the payment
 * would be delayed until the customer actually transfer the money. In that
 * case, {@link IShoppingOrderPublish.paid_at} would be `null` value, so
 * that you have to check it after calling this publish function.
 *
 * @param orderId Target order's {@link IShoppingOrder.id }
 * @param input Creation info of the publish
 * @returns Newly created publish
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingCustomerOrderPublishController.create
 * @path POST /shoppings/customers/orders/:orderId/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  orderId: string & tags.Format<"uuid">,
  input: create.Body,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(orderId),
    },
    input,
  );
}
export namespace create {
  export type Body = IShoppingOrderPublish.ICreate;
  export type Output = IShoppingOrderPublish;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/customers/orders/:orderId/publish",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (orderId: string & tags.Format<"uuid">) =>
    `/shoppings/customers/orders/${encodeURIComponent(orderId?.toString() ?? "null")}/publish`;
}

/**
 * Cancel the publish (payment).
 *
 * Cancel payment of an {@link IShoppingOrder order} that has been
 * {@link IShoppingOrderPublish published}.
 *
 * If target publish's payment method is manual bank account transfer,
 * then it would be cancelled directly. If not, then payment cancel
 * request would be sent to the payment vendor system.
 *
 * @param orderId Target order's {@link IShoppingOrder.id }
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingCustomerOrderPublishController.cancel
 * @path DELETE /shoppings/customers/orders/:orderId/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function cancel(
  connection: IConnection,
  orderId: string & tags.Format<"uuid">,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...cancel.METADATA,
    template: cancel.METADATA.path,
    path: cancel.path(orderId),
  });
}
export namespace cancel {
  export const METADATA = {
    method: "DELETE",
    path: "/shoppings/customers/orders/:orderId/publish",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (orderId: string & tags.Format<"uuid">) =>
    `/shoppings/customers/orders/${encodeURIComponent(orderId?.toString() ?? "null")}/publish`;
}
