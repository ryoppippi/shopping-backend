/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.orders.publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IShoppingOrderPublish } from "../../../../../structures/shoppings/orders/IShoppingOrderPublish";
import { NestiaSimulator } from "../../../../../utils/NestiaSimulator";

/**
 * @controller ShoppingCustomerOrderPublishesController.able
 * @path GET /shoppings/customers/orders/:orderId/publish/able
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function able(
    connection: IConnection,
    orderId: string & Format<"uuid">,
): Promise<void> {
    return !!connection.simulate
        ? able.simulate(
              connection,
              orderId,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...able.METADATA,
                  path: able.path(orderId),
              } as const,
          );
}
export namespace able {

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/orders/:orderId/publish/able",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (orderId: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(orderId ?? "null")}/publish/able`;
    }
    export const simulate = async (
        connection: IConnection,
        orderId: string & Format<"uuid">,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(orderId),
            contentType: "application/json",
        });
        assert.param("orderId")(() => typia.assert(orderId));
    }
}

/**
 * @controller ShoppingCustomerOrderPublishesController.create
 * @path POST /shoppings/customers/orders/:orderId/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    orderId: string & Format<"uuid">,
    input: create.Input,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              orderId,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...create.METADATA,
                  path: create.path(orderId),
              } as const,
              input,
          );
}
export namespace create {
    export type Input = Primitive<IShoppingOrderPublish.ICreate>;
    export type Output = Primitive<IShoppingOrderPublish>;

    export const METADATA = {
        method: "POST",
        path: "/shoppings/customers/orders/:orderId/publish",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (orderId: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(orderId ?? "null")}/publish`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrderPublish> =>
        typia.random<Primitive<IShoppingOrderPublish>>(g);
    export const simulate = async (
        connection: IConnection,
        orderId: string & Format<"uuid">,
        input: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(orderId),
            contentType: "application/json",
        });
        assert.param("orderId")(() => typia.assert(orderId));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerOrderPublishesController.cancel
 * @path DELETE /shoppings/customers/orders/:orderId/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function cancel(
    connection: IConnection,
    orderId: string & Format<"uuid">,
): Promise<void> {
    return !!connection.simulate
        ? cancel.simulate(
              connection,
              orderId,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...cancel.METADATA,
                  path: cancel.path(orderId),
              } as const,
          );
}
export namespace cancel {

    export const METADATA = {
        method: "DELETE",
        path: "/shoppings/customers/orders/:orderId/publish",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (orderId: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(orderId ?? "null")}/publish`;
    }
    export const simulate = async (
        connection: IConnection,
        orderId: string & Format<"uuid">,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(orderId),
            contentType: "application/json",
        });
        assert.param("orderId")(() => typia.assert(orderId));
    }
}