/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../structures/common/IPage";
import type { IShoppingOrder } from "../../../../structures/shoppings/orders/IShoppingOrder";
import type { IShoppingOrderDiscountable } from "../../../../structures/shoppings/orders/IShoppingOrderDiscountable";
import type { IShoppingOrderPrice } from "../../../../structures/shoppings/orders/IShoppingOrderPrice";
import { NestiaSimulator } from "../../../../utils/NestiaSimulator";

export * as goods from "./goods";
export * as publish from "./publish";

/**
 * Create a new order application.
 * 
 * Create a new {@link IShoppingOrder order application} from a
 * {@link IShoppingCartCommodity shopping cart} that has been composed by the
 * {@link IShoppingCustomer }. Of course, do not need to put every commodities
 * to the order, but possible to select some of them by the customer.
 * 
 * By the way, this function does not mean completion the order, but means
 * just customer is appling the order. The order be completed only when customer
 * {@link IShoppingOrderPublish.paid_at pays} the order.
 * 
 * @param input Creation info of the order
 * @returns Newly created order
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderController.create
 * @path POST /shoppings/customers/orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    input: create.Input,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...create.METADATA,
                  path: create.path(),
              } as const,
              input,
          );
}
export namespace create {
    export type Input = Primitive<IShoppingOrder.ICreate>;
    export type Output = Primitive<IShoppingOrder>;

    export const METADATA = {
        method: "POST",
        path: "/shoppings/customers/orders",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/shoppings/customers/orders`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrder> =>
        typia.random<Primitive<IShoppingOrder>>(g);
    export const simulate = async (
        connection: IConnection,
        input: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Erase an order application.
 * 
 * Erase an order application that has been applied by the
 * {@link IShoppingCustomer }.
 * 
 * If the order has been {@link IShoppingOrderPublish published}, then it is
 * not possible to erase the order. In that case, you've to cancel the
 * payment by calling the {@link publish.cancel } function.
 * 
 * @param id Target order's {@link IShoppingOrder.id}
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderController.erase
 * @path DELETE /shoppings/customers/orders/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
    connection: IConnection,
    id: string & Format<"uuid">,
): Promise<void> {
    return !!connection.simulate
        ? erase.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...erase.METADATA,
                  path: erase.path(id),
              } as const,
          );
}
export namespace erase {

    export const METADATA = {
        method: "DELETE",
        path: "/shoppings/customers/orders/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(id ?? "null")}`;
    }
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
    }
}

/**
 * Get price of the order.
 * 
 * Get detailed price information of the {@link IShoppingOrder order}.
 * 
 * Returned price info contains not only the amount of the order, but also
 * contains the discount amount by {@link IShoppingCoupono coupons},
 * {@link IShoppingDepositHistory deposits} and
 * {@link IShoppingMileageHistory mileages}.
 * 
 * @param id Target order's {@link IShoppingOrder.id}
 * @returns Detailed price info with discount
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderController.price
 * @path GET /shoppings/customers/orders/:id/price
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function price(
    connection: IConnection,
    id: string & Format<"uuid">,
): Promise<price.Output> {
    return !!connection.simulate
        ? price.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...price.METADATA,
                  path: price.path(id),
              } as const,
          );
}
export namespace price {
    export type Output = Primitive<IShoppingOrderPrice>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/orders/:id/price",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(id ?? "null")}/price`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrderPrice> =>
        typia.random<Primitive<IShoppingOrderPrice>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Get discountable info.
 * 
 * Compute discountable features about the {@link IShoppingOrder }.
 * 
 * Retured {@link IShoppingOrderDiscountable } contains including
 * combinations of adjustable {@link IShoppingCoupon coupons},
 * withdrawable {@link IShoppingDepositHistory deposits}
 * and {@link IShoppingMileageHistory mileages}.
 * 
 * Of course, returned features are valid only when the order has not
 * been {@link IShoppingOrderPublish published} yet. If the order has
 * already been published, then no way to discount the price more.
 * 
 * @param id Target order's {@link IShoppingOrder.id}
 * @param input Request info for discountable
 * @returns Discountable info
 * 
 * @controller ShoppingCustomerOrderController.discountable
 * @path PATCH /shoppings/customers/orders/:id/discountable
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function discountable(
    connection: IConnection,
    id: string & Format<"uuid">,
    input: discountable.Input,
): Promise<discountable.Output> {
    return !!connection.simulate
        ? discountable.simulate(
              connection,
              id,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...discountable.METADATA,
                  path: discountable.path(id),
              } as const,
              input,
          );
}
export namespace discountable {
    export type Input = Primitive<IShoppingOrderDiscountable.IRequest>;
    export type Output = Primitive<IShoppingOrderDiscountable>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/customers/orders/:id/discountable",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(id ?? "null")}/discountable`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrderDiscountable> =>
        typia.random<Primitive<IShoppingOrderDiscountable>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
        input: discountable.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Discount the order.
 * 
 * Discount total price of the {@link IShoppingOrder } by adjusting
 * {@link IShoppingCoupon coupons}, {@link IShoppingDepositHistory deposits}
 * and {@link IShoppingMileageHistory mileages}. If amount of discount
 * features are equal to the total price of the order, it is possible to
 * {@link IShoppingOrderPublish publish} it without any cash.
 * 
 * By the way, the discounting features must be valid. If not, 428
 * unprocessable entity error would be thrown. To know which features are
 * adjustable or withdrawable, call the {@link discountable } function
 * before.
 * 
 * @param id Target order's {@link IShoppingOrder.id}
 * @param input Discount info
 * @returns Detailed price info with discount
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingCustomerOrderController.discount
 * @path PUT /shoppings/customers/orders/:id/discount
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function discount(
    connection: IConnection,
    id: string & Format<"uuid">,
    input: discount.Input,
): Promise<discount.Output> {
    return !!connection.simulate
        ? discount.simulate(
              connection,
              id,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...discount.METADATA,
                  path: discount.path(id),
              } as const,
              input,
          );
}
export namespace discount {
    export type Input = Primitive<IShoppingOrderPrice.ICreate>;
    export type Output = Primitive<IShoppingOrderPrice>;

    export const METADATA = {
        method: "PUT",
        path: "/shoppings/customers/orders/:id/discount",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(id ?? "null")}/discount`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrderPrice> =>
        typia.random<Primitive<IShoppingOrderPrice>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
        input: discount.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerOrderController.index
 * @path PATCH /shoppings/customers/orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    input: index.Input,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...index.METADATA,
                  path: index.path(),
              } as const,
              input,
          );
}
export namespace index {
    export type Input = Primitive<IShoppingOrder.IRequest>;
    export type Output = Primitive<IPage<IShoppingOrder>>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/customers/orders",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/shoppings/customers/orders`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IShoppingOrder>> =>
        typia.random<Primitive<IPage<IShoppingOrder>>>(g);
    export const simulate = async (
        connection: IConnection,
        input: index.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerOrderController.at
 * @path GET /shoppings/customers/orders/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    id: string & Format<"uuid">,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IShoppingOrder>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/orders/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/shoppings/customers/orders/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrder> =>
        typia.random<Primitive<IShoppingOrder>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}