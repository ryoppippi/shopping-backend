/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.systematic.channels.categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { tags } from "typia";

import type { IShoppingChannelCategory } from "../../../../../../structures/shoppings/systematic/IShoppingChannelCategory";

/**
 * List up every categories with children records.
 *
 * List up every {@link IShoppingChannelCategory.IHierarchical categories}
 * of a {@link IShoppingChannel channel} with pagination. Returned categories
 * contain children categories, too.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingChannelCategory.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingChannelCategory.IRequest.sort sort condition}.
 *
 * @param channelCode Belonged channel's {@link IShoppingChannel.code }
 * @returns Paginated categories with children categories
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingCustomerSystematicChannelCategoryController.index
 * @path PATCH /shoppings/customers/systematic/channels/:channelCode/categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  channelCode: string,
): Promise<index.Output> {
  return PlainFetcher.fetch(connection, {
    ...index.METADATA,
    template: index.METADATA.path,
    path: index.path(channelCode),
  });
}
export namespace index {
  export type Output = IShoppingChannelCategory.IHierarchical[];

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/systematic/channels/:channelCode/categories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (channelCode: string) =>
    `/shoppings/customers/systematic/channels/${encodeURIComponent(channelCode?.toString() ?? "null")}/categories`;
}

/**
 * Get a category info.
 *
 * Get a detailed {@link IShoppingChannelCategory category} information.
 *
 * Returned category contains hierarchical children categories, and also
 * contains the recursive parent categories, too.
 *
 * @param channelCode Belonged channel's {@link IShoppingChannel.code }
 * @param id Target category's {@link IShoppingChannelCategory.id }
 * @returns Detailed category info
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingCustomerSystematicChannelCategoryController.at
 * @path GET /shoppings/customers/systematic/channels/:channelCode/categories/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  channelCode: string,
  id: string & tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(channelCode, id),
  });
}
export namespace at {
  export type Output = IShoppingChannelCategory;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/systematic/channels/:channelCode/categories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (channelCode: string, id: string & tags.Format<"uuid">) =>
    `/shoppings/customers/systematic/channels/${encodeURIComponent(channelCode?.toString() ?? "null")}/categories/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * Get a category info of inverted.
 *
 * Get a inverted {@link IShoppingChannelCategory.IInvert category} information.
 *
 * Returned category contains the recursive parent categories, but not contains
 * the hierarchical children categories.
 *
 * @param channelCode Belonged channel's {@link IShoppingChannel.code }
 * @param id Target category's {@link IShoppingChannelCategory.id }
 * @returns Detailed category info
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingCustomerSystematicChannelCategoryController.invert
 * @path GET /shoppings/customers/systematic/channels/:channelCode/categories/:id/invert
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function invert(
  connection: IConnection,
  channelCode: string,
  id: string & tags.Format<"uuid">,
): Promise<invert.Output> {
  return PlainFetcher.fetch(connection, {
    ...invert.METADATA,
    template: invert.METADATA.path,
    path: invert.path(channelCode, id),
  });
}
export namespace invert {
  export type Output = IShoppingChannelCategory.IInvert;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/systematic/channels/:channelCode/categories/:id/invert",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (channelCode: string, id: string & tags.Format<"uuid">) =>
    `/shoppings/customers/systematic/channels/${encodeURIComponent(channelCode?.toString() ?? "null")}/categories/${encodeURIComponent(id?.toString() ?? "null")}/invert`;
}
