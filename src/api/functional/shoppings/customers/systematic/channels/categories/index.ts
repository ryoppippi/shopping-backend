/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.systematic.channels.categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IShoppingChannelCategory } from "../../../../../../structures/shoppings/systematic/IShoppingChannelCategory";
import { NestiaSimulator } from "../../../../../../utils/NestiaSimulator";

/**
 * @controller ShoppingCustomerSystematicChannelCategoryController.index
 * @path PATCH /shoppings/customers/systematic/channels/:channelCode/categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    channelCode: string,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              channelCode,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...index.METADATA,
                  path: index.path(channelCode),
              } as const,
          );
}
export namespace index {
    export type Output = Primitive<Array<IShoppingChannelCategory.IHierarchical>>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/customers/systematic/channels/:channelCode/categories",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (channelCode: string): string => {
        return `/shoppings/customers/systematic/channels/${encodeURIComponent(channelCode ?? "null")}/categories`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<Array<IShoppingChannelCategory.IHierarchical>> =>
        typia.random<Primitive<Array<IShoppingChannelCategory.IHierarchical>>>(g);
    export const simulate = async (
        connection: IConnection,
        channelCode: string,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(channelCode),
            contentType: "application/json",
        });
        assert.param("channelCode")(() => typia.assert(channelCode));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerSystematicChannelCategoryController.at
 * @path GET /shoppings/customers/systematic/channels/:channelCode/categories/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    channelCode: string,
    id: string & Format<"uuid">,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              channelCode,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(channelCode, id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IShoppingChannelCategory>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/systematic/channels/:channelCode/categories/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (channelCode: string, id: string & Format<"uuid">): string => {
        return `/shoppings/customers/systematic/channels/${encodeURIComponent(channelCode ?? "null")}/categories/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingChannelCategory> =>
        typia.random<Primitive<IShoppingChannelCategory>>(g);
    export const simulate = async (
        connection: IConnection,
        channelCode: string,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(channelCode, id),
            contentType: "application/json",
        });
        assert.param("channelCode")(() => typia.assert(channelCode));
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * @controller ShoppingCustomerSystematicChannelCategoryController.invert
 * @path GET /shoppings/customers/systematic/channels/:channelCode/categories/:id/invert
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function invert(
    connection: IConnection,
    channelCode: string,
    id: string & Format<"uuid">,
): Promise<invert.Output> {
    return !!connection.simulate
        ? invert.simulate(
              connection,
              channelCode,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...invert.METADATA,
                  path: invert.path(channelCode, id),
              } as const,
          );
}
export namespace invert {
    export type Output = Primitive<IShoppingChannelCategory.IInvert>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/systematic/channels/:channelCode/categories/:id/invert",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (channelCode: string, id: string & Format<"uuid">): string => {
        return `/shoppings/customers/systematic/channels/${encodeURIComponent(channelCode ?? "null")}/categories/${encodeURIComponent(id ?? "null")}/invert`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingChannelCategory.IInvert> =>
        typia.random<Primitive<IShoppingChannelCategory.IInvert>>(g);
    export const simulate = async (
        connection: IConnection,
        channelCode: string,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(channelCode, id),
            contentType: "application/json",
        });
        assert.param("channelCode")(() => typia.assert(channelCode));
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}