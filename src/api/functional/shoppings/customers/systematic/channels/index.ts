/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.systematic.channels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingChannel } from "../../../../../structures/shoppings/systematic/IShoppingChannel";

export * as categories from "./categories";

/**
 * List up every channels.
 *
 * List up every {@link IShoppingChannel channels} with pagination.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingChannel.IRequest.search search condition} in the request
 * body. Also, it is possible to customize sequence order of records by
 * configuring {@link IShoppingChannel.IRequest.sort sort condition}.
 *
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated channels
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingCustomerSystematicChannelController.index
 * @path PATCH /shoppings/customers/systematic/channels
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  input: IShoppingChannel.IRequest,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(),
    },
    input,
  );
}
export namespace index {
  export type Input = IShoppingChannel.IRequest;
  export type Output = IPage<IShoppingChannel>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/systematic/channels",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/shoppings/customers/systematic/channels";
}

/**
 * List up every channels with nested categories.
 *
 * List up every {@link IShoppingChannel.IHierarchical channels} with
 * {@link IPage pagination}. Returned channels contain nested hierarchical
 * {@link IShoppingChannelCategory.IHierarchical categories}.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingChannel.IRequest.search search condition} in the request
 * body. Also, it is possible to customize sequence order of records by
 * configuring {@link IShoppingChannel.IRequest.sort sort condition}.
 *
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated channels with nested categories
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingCustomerSystematicChannelController.hierarchical
 * @path PATCH /shoppings/customers/systematic/channels/hierarchical
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function hierarchical(
  connection: IConnection,
  input: IShoppingChannel.IRequest,
): Promise<hierarchical.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...hierarchical.METADATA,
      template: hierarchical.METADATA.path,
      path: hierarchical.path(),
    },
    input,
  );
}
export namespace hierarchical {
  export type Input = IShoppingChannel.IRequest;
  export type Output = IPage<IShoppingChannel.IHierarchical>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/systematic/channels/hierarchical",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () =>
    "/shoppings/customers/systematic/channels/hierarchical";
}

/**
 * Get a channel info.
 *
 * Get a detailed {@link IShoppingChannel.IHierarchical channel} information.
 *
 * Returned channel instance also contains the nested
 * {@link IShoppingChannelCategory.IHierarchical hierarchical category}
 * informations.
 *
 * @param id Target channel's {@link IShoppingChannel.id }
 * @returns Detailed channel info
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingCustomerSystematicChannelController.at
 * @path GET /shoppings/customers/systematic/channels/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(id),
  });
}
export namespace at {
  export type Output = IShoppingChannel.IHierarchical;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/systematic/channels/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & Format<"uuid">) =>
    `/shoppings/customers/systematic/channels/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * Get a channel info by its code.
 *
 * Get a detailed {@link IShoppingChannel.IHierarchical channel} information
 * by its code.
 *
 * Returned channel instance also contains the nested
 * {@link IShoppingChannelCategory.IHierarchical hierarchical category}
 * informations.
 *
 * @param code Target channel's {@link IShoppingChannel.code }
 * @returns Detailed channel info
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingCustomerSystematicChannelController.get
 * @path GET /shoppings/customers/systematic/channels/:code/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  code: string,
): Promise<get.Output> {
  return PlainFetcher.fetch(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(code),
  });
}
export namespace get {
  export type Output = IShoppingChannel.IHierarchical;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/systematic/channels/:code/get",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (code: string) =>
    `/shoppings/customers/systematic/channels/${encodeURIComponent(code?.toString() ?? "null")}/get`;
}
