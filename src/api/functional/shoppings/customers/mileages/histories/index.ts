/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.mileages.histories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingMileageHistory } from "../../../../../structures/shoppings/mileages/IShoppingMileageHistory";

/**
 * List up every mileage histories.
 *
 * List up every {@link IShoppingMileageHistory mileage histories} of the
 * {@link IShoppingCustomer customer} with {@link IPage pagination}.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingMileageHistory.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingMileageHistory.IRequest.sort sort condition}.
 *
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated mileage histories
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerMileageHistoryController.index
 * @path PATCH /shoppings/customers/mileages/histories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  input: IShoppingMileageHistory.IRequest,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(),
    },
    input,
  );
}
export namespace index {
  export type Input = IShoppingMileageHistory.IRequest;
  export type Output = IPage<IShoppingMileageHistory>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/mileages/histories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/shoppings/customers/mileages/histories";
}

/**
 * Get a mileage history info.
 *
 * Get a {@link IShoppingMileageHistory mileage history} information.
 *
 * @param id Target mileage history's {@link IShoppingMileageHistory.id }
 * @returns Mileage history info
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerMileageHistoryController.at
 * @path GET /shoppings/customers/mileages/histories/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(id),
  });
}
export namespace at {
  export type Output = IShoppingMileageHistory;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/mileages/histories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & Format<"uuid">) =>
    `/shoppings/customers/mileages/histories/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * Get balance of the mileage.
 *
 * Get current balance of the mileage of the {@link IShoppingCustomer customer}.
 *
 * @returns Balance of the mileage
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerMileageHistoryController.balance
 * @path GET /shoppings/customers/mileages/histories/balance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function balance(
  connection: IConnection,
): Promise<balance.Output> {
  return PlainFetcher.fetch(connection, {
    ...balance.METADATA,
    template: balance.METADATA.path,
    path: balance.path(),
  });
}
export namespace balance {
  export type Output = number;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/mileages/histories/balance",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/shoppings/customers/mileages/histories/balance";
}
