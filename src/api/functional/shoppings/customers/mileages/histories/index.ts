/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.mileages.histories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingMileageHistory } from "../../../../../structures/shoppings/mileages/IShoppingMileageHistory";

/**
 * List up every mileage histories.
 *
 * List up every {@link IShoppingMileageHistory mileage histories} of the
 * {@link IShoppingCustomer customer} with {@link IPage pagination}.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingMileageHistory.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingMileageHistory.IRequest.sort sort condition}.
 *
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated mileage histories
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerMileageHistoryController.index
 * @path PATCH /shoppings/customers/mileages/histories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  input: index.Input,
): Promise<index.Output> {
  return !!connection.simulate
    ? index.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
        },
        input,
      );
}
export namespace index {
  export type Input = Primitive<IShoppingMileageHistory.IRequest>;
  export type Output = Primitive<IPage<IShoppingMileageHistory>>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/mileages/histories",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/shoppings/customers/mileages/histories";
  export const random = (g?: Partial<typia.IRandomGenerator>) =>
    typia.random<Primitive<IPage<IShoppingMileageHistory>>>(g);
  export const simulate = (
    connection: IConnection,
    input: index.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a mileage history info.
 *
 * Get a {@link IShoppingMileageHistory mileage history} information.
 *
 * @param id Target mileage history's {@link IShoppingMileageHistory.id}
 * @returns Mileage history info
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerMileageHistoryController.at
 * @path GET /shoppings/customers/mileages/histories/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & Format<"uuid">,
): Promise<at.Output> {
  return !!connection.simulate
    ? at.simulate(connection, id)
    : PlainFetcher.fetch(connection, {
        ...at.METADATA,
        path: at.path(id),
      });
}
export namespace at {
  export type Output = Primitive<IShoppingMileageHistory>;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/mileages/histories/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string & Format<"uuid">) =>
    `/shoppings/customers/mileages/histories/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>) =>
    typia.random<Primitive<IShoppingMileageHistory>>(g);
  export const simulate = (
    connection: IConnection,
    id: string & Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get balance of the mileage.
 *
 * Get current balance of the mileage of the {@link IShoppingCustomer customer}.
 *
 * @returns Balance of the mileage
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerMileageHistoryController.balance
 * @path GET /shoppings/customers/mileages/histories/balance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function balance(
  connection: IConnection,
): Promise<balance.Output> {
  return !!connection.simulate
    ? balance.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...balance.METADATA,
        path: balance.path(),
      });
}
export namespace balance {
  export type Output = Primitive<number>;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/mileages/histories/balance",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/shoppings/customers/mileages/histories/balance";
  export const random = (g?: Partial<typia.IRandomGenerator>) =>
    typia.random<Primitive<number>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
