/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.deposits.charges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingDepositCharge } from "../../../../../structures/shoppings/deposits/IShoppingDepositCharge";

export * as publish from "./publish";

/**
 * List up every deposit charges.
 *
 * List up every {@link IShoppingDepositCharge deposit charges} of the
 * {@link IShoppingCustomer customer} with {@link IPage pagination}.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingDepositCharge.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingDepositCharge.IRequest.sort sort condition}.
 *
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated deposit charges
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerDepositChargeController.index
 * @path PATCH /shoppings/customers/deposits/charges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  input: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(),
    },
    input,
  );
}
export namespace index {
  export type Body = IShoppingDepositCharge.IRequest;
  export type Output = IPage<IShoppingDepositCharge>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/customers/deposits/charges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/shoppings/customers/deposits/charges";
}

/**
 * Get a deposit charge info.
 *
 * Get a {@link IShoppingDepositCharge deposit charge} information.
 *
 * @param id Target deposit charge's {@link IShoppingDepositCharge.id }
 * @returns Deposit charge info
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerDepositChargeController.at
 * @path GET /shoppings/customers/deposits/charges/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(id),
  });
}
export namespace at {
  export type Output = IShoppingDepositCharge;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/deposits/charges/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/shoppings/customers/deposits/charges/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * Create a new deposit charge application.
 *
 * Create a new {@link IShoppingDepositCharge deposit charge application}.
 *
 * By the way, this function does not mean completion the deposit charge, but
 * means just {@link IShoppingCustomer customer} is applying the deposit charge.
 * The deposit charge be completed only when customer
 * {@link IShoppingDepositChargePublish.publish pay} the deposit charge.
 *
 * @param input Creation info of the deposit charge
 * @returns Newly created deposit charge
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerDepositChargeController.create
 * @path POST /shoppings/customers/deposits/charges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  input: create.Body,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    input,
  );
}
export namespace create {
  export type Body = IShoppingDepositCharge.ICreate;
  export type Output = IShoppingDepositCharge;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/customers/deposits/charges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/shoppings/customers/deposits/charges";
}

/**
 * Update a deposit charge application.
 *
 * Update value of a {@link IShoppingDepositCharge deposit charge application}
 * that has been applied by the {@link IShoppingCustomer}.
 *
 * If the charge has been {@link IShoppingDepositChargePublish published},
 * then it is not possible to update the deposit charge. Only 410 gone exception
 * would be thrown.
 *
 * @param id Target deposit charge's {@link IShoppingDepositCharge.id }
 * @param input Value to change
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerDepositChargeController.update
 * @path PUT /shoppings/customers/deposits/charges/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string,
  input: update.Body,
): Promise<void> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...update.METADATA,
      template: update.METADATA.path,
      path: update.path(id),
    },
    input,
  );
}
export namespace update {
  export type Body = IShoppingDepositCharge.ICreate;

  export const METADATA = {
    method: "PUT",
    path: "/shoppings/customers/deposits/charges/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/shoppings/customers/deposits/charges/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * Erase a deposit charge application.
 *
 * Erase a {@link IShoppingDepositCharge deposit charge application} that has been
 * applied by the {@link IShoppingCustomer}.
 *
 * If the charge has been {@link IShoppingDepositChargePublish published}, then
 * it is not possible to erase the deposit charge. In that case, you've to cancel
 * the payment by calling the {@link publish.cancel} function.
 *
 * @param id Target deposit charge's {@link IShoppingDepositCharge.id }
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerDepositChargeController.erase
 * @path DELETE /shoppings/customers/deposits/charges/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
  connection: IConnection,
  id: string,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...erase.METADATA,
    template: erase.METADATA.path,
    path: erase.path(id),
  });
}
export namespace erase {
  export const METADATA = {
    method: "DELETE",
    path: "/shoppings/customers/deposits/charges/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/shoppings/customers/deposits/charges/${encodeURIComponent(id?.toString() ?? "null")}`;
}
