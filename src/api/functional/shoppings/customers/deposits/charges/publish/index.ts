/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.deposits.charges.publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IShoppingDepositChargePublish } from "../../../../../../structures/shoppings/deposits/IShoppingDepositChargePublish";

/**
 * Check publishable.
 *
 * Test whether the {@link IShoppingDepositCharge charge} is publishable or not.
 *
 * If the charge has not been {@link IShoppingDepositChargePublish published} and
 * not deleted yet, then it is possible to publish the charge
 *
 * @param chargeId Target charge's {@link IShoppingDepositCharge.id }
 * @returns Whether the charge is publishable or not
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerDepositChargePublishController.able
 * @path GET /shoppings/customers/deposits/charges/:chargeId/publish/able
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function able(
  connection: IConnection,
  chargeId: string & Format<"uuid">,
): Promise<able.Output> {
  return !!connection.simulate
    ? able.simulate(connection, chargeId)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...able.METADATA,
          template: able.METADATA.path,
          path: able.path(chargeId),
        },
      );
}
export namespace able {
  export type Output = false | true;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/customers/deposits/charges/:chargeId/publish/able",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (chargeId: string & Format<"uuid">) =>
    `/shoppings/customers/deposits/charges/${encodeURIComponent(chargeId?.toString() ?? "null")}/publish/able`;
  export const random = (g?: Partial<typia.IRandomGenerator>): false | true =>
    typia.random<false | true>(g);
  export const simulate = (
    connection: IConnection,
    chargeId: string & Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(chargeId),
      contentType: "application/json",
    });
    assert.param("chargeId")(() => typia.assert(chargeId));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Publish a charge.
 *
 * {@link IShoppingDepositChargePublish Publish} a
 * {@link IShoppingDepositCharge charge} that has been applied by the
 * {@link IShoppingCustomer} with payment information gotten from the
 * payment vendor system.
 *
 * Also, the payment time can be different with the publish time. For example,
 * if the payment method is manual bank account transfer, then the payment
 * would be delayed until the customer actually transfer the money. In that
 * case, {@link IShoppingDepositChargePublish.paid_at} would be `null` value,
 * so that you have to check it after calling this publish function.
 *
 * @param chargeId Target charge's {@link IShoppingDepositCharge.id }
 * @param input Creation info of the publish
 * @returns Newly created publish
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingCustomerDepositChargePublishController.create
 * @path POST /shoppings/customers/deposits/charges/:chargeId/publish
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  chargeId: string & Format<"uuid">,
  input: IShoppingDepositChargePublish.ICreate,
): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection, chargeId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          template: create.METADATA.path,
          path: create.path(chargeId),
        },
        input,
      );
}
export namespace create {
  export type Input = IShoppingDepositChargePublish.ICreate;
  export type Output = IShoppingDepositChargePublish;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/customers/deposits/charges/:chargeId/publish",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (chargeId: string & Format<"uuid">) =>
    `/shoppings/customers/deposits/charges/${encodeURIComponent(chargeId?.toString() ?? "null")}/publish`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IShoppingDepositChargePublish =>
    typia.random<IShoppingDepositChargePublish>(g);
  export const simulate = (
    connection: IConnection,
    chargeId: string & Format<"uuid">,
    input: IShoppingDepositChargePublish.ICreate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(chargeId),
      contentType: "application/json",
    });
    assert.param("chargeId")(() => typia.assert(chargeId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
