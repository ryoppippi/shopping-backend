/**
 * @packageDocumentation
 * @module api.functional.shoppings.customers.deposits.histories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingDepositHistory } from "../../../../../structures/shoppings/deposits/IShoppingDepositHistory";
import { NestiaSimulator } from "../../../../../utils/NestiaSimulator";

/**
 * List up every deposit histories.
 * 
 * List up every {@link IShoppingDepositHistory deposit histories} of the
 * {@link IShoppingCustomer customer} with {@link IPage pagination}.
 * 
 * If you want, you can limit the result by configuring
 * {@link IShoppingDepositHistory.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingDepositHistory.IRequest.sort sort condition}.
 * 
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated deposit histories
 * @tag Deposit
 * @author Samchon
 * 
 * @controller ShoppingCustomerDepositHistoryController.index
 * @path PATCH /shoppings/customers/deposits/histories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    input: index.Input,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...index.METADATA,
                  path: index.path(),
              } as const,
              input,
          );
}
export namespace index {
    export type Input = Primitive<IShoppingDepositHistory.IRequest>;
    export type Output = Primitive<IPage<IShoppingDepositHistory>>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/customers/deposits/histories",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/shoppings/customers/deposits/histories`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IShoppingDepositHistory>> =>
        typia.random<Primitive<IPage<IShoppingDepositHistory>>>(g);
    export const simulate = async (
        connection: IConnection,
        input: index.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Get a deposit history info.
 * 
 * Get a {@link IShoppingDepositHistory deposit history} information.
 * 
 * @param id
 * @returns Deposit history info
 * @tag Deposit
 * @author Samchon
 * 
 * @controller ShoppingCustomerDepositHistoryController.at
 * @path GET /shoppings/customers/deposits/histories/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    id: string & Format<"uuid">,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IShoppingDepositHistory>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/deposits/histories/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/shoppings/customers/deposits/histories/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingDepositHistory> =>
        typia.random<Primitive<IShoppingDepositHistory>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Get balance of the deposit.
 * 
 * Get current balance of the deposit of the {@link IShoppingCustomer customer}.
 * 
 * @returns Balance of the deposit
 * @tag Deposit
 * @author Samchon
 * 
 * @controller ShoppingCustomerDepositHistoryController.balance
 * @path GET /shoppings/customers/deposits/histories/balance
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function balance(
    connection: IConnection,
): Promise<balance.Output> {
    return !!connection.simulate
        ? balance.simulate(
              connection,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...balance.METADATA,
                  path: balance.path(),
              } as const,
          );
}
export namespace balance {
    export type Output = Primitive<number>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/customers/deposits/histories/balance",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/shoppings/customers/deposits/histories/balance`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<number> =>
        typia.random<Primitive<number>>(g);
    export const simulate = async (
        connection: IConnection,
    ): Promise<Output> => {
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}