/**
 * @packageDocumentation
 * @module api.functional.shoppings.sellers.sales.questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { tags } from "typia";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingSaleQuestion } from "../../../../../structures/shoppings/sales/inquiries/IShoppingSaleQuestion";

export * as answer from "./answer";
export * as comments from "./comments";

/**
 * List up every summarized questions.
 *
 * List up every {@link IShoppingSaleQuestion.ISummary summarized questions} of a
 * {@link IShoppingSale sale}.
 *
 * As you can see, returned questions are summarized, not detailed. If you want
 * to get the detailed information of a question, use {@link adridges} function
 * or {@link at} function for each article.
 *
 * Also, returned question has {@link IShoppingSaleQuestion.ISummary.answer}
 * property which means the formal answer from the {@link IShoppingSeller}.
 * Additionally, returned question has another special property
 * {@link IShoppingSaleQuestion.ISummary.secret} with masking to other
 * principle properties, and it means only related actors can {@link at read}
 * the question.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s questions. Otherwise,
 * you can access to every questions of the sales.
 *
 * By the way, if you want, you can limit the result by configuring
 * {@link IShoppingSaleQuestion.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated questions with summarized information
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleQuestionController.index
 * @path PATCH /shoppings/sellers/sales/:saleId/questions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  saleId: string & tags.Format<"uuid">,
  input: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(saleId),
    },
    input,
  );
}
export namespace index {
  export type Body = IShoppingSaleQuestion.IRequest;
  export type Output = IPage<IShoppingSaleQuestion.ISummary>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/sellers/sales/:saleId/questions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (saleId: string & tags.Format<"uuid">) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions`;
}

/**
 * List up every abridged questions.
 *
 * List up every {@link IShoppingSaleQuestion.IAbridge abridged questions} of
 * a {@link IShoppingSale sale}.
 *
 * As you can see, returned questions are abridged, not detailed. If you want
 * to get the detailed information of a question, use {@link at} function
 * for each article.
 *
 * Also, returned question has {@link IShoppingSaleQuestion.IAridge.answer}
 * property which means the formal answer from the {@link IShoppingSeller}.
 * Additionally, returned question has another special property
 * {@link IShoppingSaleQuestion.IAridge.secret} with masking to other
 * principle properties, and it means only related actors can {@link at read}
 * the question.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s questions. Otherwise,
 * you can access to every questions of the sales.
 *
 * By the way, if you want, you can limit the result by configuring
 * {@link IShoppingSaleQuestion.IRequest.search search condition} in the
 * request body. Also, it is possible to customize sequence order of records
 * by configuring {@link IShoppingSaleQuestion.IRequest.sort sort condition}.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated questions with abridged information
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleQuestionController.abridges
 * @path PATCH /shoppings/sellers/sales/:saleId/questions/abridges
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function abridges(
  connection: IConnection,
  saleId: string & tags.Format<"uuid">,
  input: abridges.Body,
): Promise<abridges.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...abridges.METADATA,
      template: abridges.METADATA.path,
      path: abridges.path(saleId),
    },
    input,
  );
}
export namespace abridges {
  export type Body = IShoppingSaleQuestion.IRequest;
  export type Output = IPage<IShoppingSaleQuestion.IAbridge>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/sellers/sales/:saleId/questions/abridges",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (saleId: string & tags.Format<"uuid">) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions/abridges`;
}

/**
 * Get a question info.
 *
 * Get a detailed {@link IShoppingSaleQuestion question} information of a
 * {@link IShoppingSale sale}.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s question. Otherwise
 * you are a {@link IShoppingCustomer customer}, you can access to every
 * questions of the sales except the {@link IShoppingSaleQuestion.secret}
 * value is `false`.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target question's {@link IShoppingSaleQuestion.id }
 * @returns Detailed question info
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleQuestionController.at
 * @path GET /shoppings/sellers/sales/:saleId/questions/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  saleId: string & tags.Format<"uuid">,
  id: string & tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(saleId, id),
  });
}
export namespace at {
  export type Output = IShoppingSaleQuestion;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/sellers/sales/:saleId/questions/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    saleId: string & tags.Format<"uuid">,
    id: string & tags.Format<"uuid">,
  ) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/questions/${encodeURIComponent(id?.toString() ?? "null")}`;
}
