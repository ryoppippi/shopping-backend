/**
 * @packageDocumentation
 * @module api.functional.shoppings.sellers.sales.reviews.answer
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IBbsArticle } from "../../../../../../structures/common/IBbsArticle";
import type { IShoppingSaleInquiryAnswer } from "../../../../../../structures/shoppings/sales/inquiries/IShoppingSaleInquiryAnswer";

/**
 * Write an answer article.
 *
 * Write a formal {@link IShoppingSaleInquiryAnswer answer article} to a
 * specific {@link IShoppingSaleInquiry review article} written by a
 * {@link IShoppingCustomer }.
 *
 * Note that, this is the formal answer that can be written only one per
 * a review article (but {@link update updatable}). Therefore, it needs to
 * guide the {@link IShoppingSeller seller} to write it carefully.
 *
 * Also, as seller can write {@link IShoppingSaleInquiryComment comments} to
 * the review article as many as he/she wants, it would be useful for
 * additional communication.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param reviewId Target review's {@link IShoppingSaleReview.id }
 * @param input Creation info of the answer article
 * @returns Newly created answer article
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleReviewAnswerController.create
 * @path POST /shoppings/sellers/sales/:saleId/reviews/:reviewId/answer
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  reviewId: string & Format<"uuid">,
  input: IBbsArticle.ICreate,
): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection, saleId, reviewId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(saleId, reviewId),
        },
        input,
      );
}
export namespace create {
  export type Input = IBbsArticle.ICreate;
  export type Output = IShoppingSaleInquiryAnswer;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/sellers/sales/:saleId/reviews/:reviewId/answer",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    saleId: string & Format<"uuid">,
    reviewId: string & Format<"uuid">,
  ) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId ?? "null")}/reviews/${encodeURIComponent(reviewId ?? "null")}/answer`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IShoppingSaleInquiryAnswer => typia.random<IShoppingSaleInquiryAnswer>(g);
  export const simulate = (
    connection: IConnection,
    saleId: string & Format<"uuid">,
    reviewId: string & Format<"uuid">,
    input: IBbsArticle.ICreate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(saleId, reviewId),
      contentType: "application/json",
    });
    assert.param("saleId")(() => typia.assert(saleId));
    assert.param("reviewId")(() => typia.assert(reviewId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update an answer article.
 *
 * Update a formal {@link IShoppingSaleInquiryAnswer answer article} to a
 * specific {@link IShoppingSaleInquiry review article} written by a
 * {@link IShoppingCustomer }.
 *
 * By the way, as is the general policy of this shopping mall regarding
 * articles, modifying a review articles does not actually change the
 * existing content. Modified content is accumulated and recorded in the
 * existing article record as a new
 * {@link IShoppingSaleInquiryAnswer.ISnapshot snapshot}. And this is made
 * public to everyone, including the {@link IShoppingCustomer customer} and the
 * {@link IShoppingSeller seller}, and anyone who can view the article can
 * also view the entire editing histories.
 *
 * This is to prevent customers or sellers from modifying their articles and
 * manipulating the circumstances due to the nature of e-commerce, where
 * disputes easily arise. That is, to preserve evidence.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param reviewId Target review's {@link IShoppingSaleReview.id }
 * @param input Update info of the answer article
 * @returns Newly created snapshot record of the answer article
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleReviewAnswerController.update
 * @path PUT /shoppings/sellers/sales/:saleId/reviews/:reviewId/answer
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  saleId: string & Format<"uuid">,
  reviewId: string & Format<"uuid">,
  input: IBbsArticle.ICreate,
): Promise<update.Output> {
  return !!connection.simulate
    ? update.simulate(connection, saleId, reviewId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(saleId, reviewId),
        },
        input,
      );
}
export namespace update {
  export type Input = IBbsArticle.ICreate;
  export type Output = IShoppingSaleInquiryAnswer.ISnapshot;

  export const METADATA = {
    method: "PUT",
    path: "/shoppings/sellers/sales/:saleId/reviews/:reviewId/answer",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    saleId: string & Format<"uuid">,
    reviewId: string & Format<"uuid">,
  ) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId ?? "null")}/reviews/${encodeURIComponent(reviewId ?? "null")}/answer`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IShoppingSaleInquiryAnswer.ISnapshot =>
    typia.random<IShoppingSaleInquiryAnswer.ISnapshot>(g);
  export const simulate = (
    connection: IConnection,
    saleId: string & Format<"uuid">,
    reviewId: string & Format<"uuid">,
    input: IBbsArticle.ICreate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(saleId, reviewId),
      contentType: "application/json",
    });
    assert.param("saleId")(() => typia.assert(saleId));
    assert.param("reviewId")(() => typia.assert(reviewId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
