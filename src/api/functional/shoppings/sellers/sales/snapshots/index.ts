/**
 * @packageDocumentation
 * @module api.functional.shoppings.sellers.sales.snapshots
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { tags } from "typia";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingSale } from "../../../../../structures/shoppings/sales/IShoppingSale";
import type { IShoppingSaleSnapshot } from "../../../../../structures/shoppings/sales/IShoppingSaleSnapshot";

/**
 * Get replica of a snapshot.
 *
 * Get a {@link IShoppingSale.ICreate} typed info of the target
 * {@link IShoppingSaleSnapshot snapshot} record for replication.
 *
 * It would be useful for creating a new replication {@link IShoppingSale sale}
 * from the old snapshot.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target snapshot's {@link IShoppingSaleSnapshot.id }
 * @returns Creation info of the sale for replication
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleSnapshotController.replica
 * @path POST /shoppings/sellers/sales/:saleId/snapshots/:id/replica
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function replica(
  connection: IConnection,
  saleId: string & tags.Format<"uuid">,
  id: string & tags.Format<"uuid">,
): Promise<replica.Output> {
  return PlainFetcher.fetch(connection, {
    ...replica.METADATA,
    template: replica.METADATA.path,
    path: replica.path(saleId, id),
  });
}
export namespace replica {
  export type Output = IShoppingSale.ICreate;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/sellers/sales/:saleId/snapshots/:id/replica",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (
    saleId: string & tags.Format<"uuid">,
    id: string & tags.Format<"uuid">,
  ) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/snapshots/${encodeURIComponent(id?.toString() ?? "null")}/replica`;
}

/**
 * List up every snapshots.
 *
 * Whenever {@link IShoppingSeller seller} updates a
 * {@link IShoppingSale sale}, the sale record is not updated but a new
 * {@link IShoppingSaleSnapshot snapshot} record is created to keep the
 * integrity of the sale history. This API function is for listing up
 * such snapshot records.
 *
 * Also, as you can see from the return type, returned snapshots are
 * summarized, not detailed. If you want to get the detailed information
 * of a snapshot, use {@link at} or {@link flipo} function for each snapshot.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,
 * you can access to every snapshots of the sales even though the sale has
 * been closed or suspended.
 *
 * @param saleId Target sale's {@link IShoppingSale.id }
 * @param input Requestion info of pagination
 * @returns Paginated snapshots with summarized information
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleSnapshotController.index
 * @path PATCH /shoppings/sellers/sales/:saleId/snapshots
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  saleId: string & tags.Format<"uuid">,
  input: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(saleId),
    },
    input,
  );
}
export namespace index {
  export type Body = IPage.IRequest;
  export type Output = IPage<IShoppingSaleSnapshot.ISummary>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/sellers/sales/:saleId/snapshots",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (saleId: string & tags.Format<"uuid">) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/snapshots`;
}

/**
 * Get a snapshot info.
 *
 * Get a {@link IShoppingSaleSnapshot snapshot} with detailed information.
 *
 * As you can see from the return type, returned snapshot does not contain
 * the {@link IShoppingSale sale} info. If you want to get the sale info,
 * use the {@link flip} function instead.
 *
 * For reference, if you're a {@link IShoppingSeller seller}, you can only
 * access to the your own {@link IShoppingSale sale}'s snapshots. Otherwise,
 * you can access to every snapshots of the sales even though the sale has
 * been closed or suspended.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target snapshot's {@link IShoppingSaleSnapshot.id }
 * @returns Detailed information of the snapshot
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleSnapshotController.at
 * @path GET /shoppings/sellers/sales/:saleId/snapshots/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  saleId: string & tags.Format<"uuid">,
  id: string & tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(saleId, id),
  });
}
export namespace at {
  export type Output = IShoppingSaleSnapshot;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/sellers/sales/:saleId/snapshots/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    saleId: string & tags.Format<"uuid">,
    id: string & tags.Format<"uuid">,
  ) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/snapshots/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * Get a flipped snapshot info.
 *
 * Get a {@link IShoppingSale sale} info of a flipped snapshot.
 *
 * As you can see from the return type, this function returns the
 * {@link IShoppingSale sale} info. By the way, the sale info is not the
 * latest one, but a flipped info in the snapshot side.
 *
 * Also, if you're a {@link IShoppingSeller seller}, you can only access to
 * the your own {@link IShoppingSale sale}'s snapshots. Otherwise, you can
 * access to every snapshots of the sales even though the sale has been
 * closed or suspended.
 *
 * @param saleId Belonged sale's {@link IShoppingSale.id }
 * @param id Target snapshot's {@link IShoppingSaleSnapshot.id }
 * @returns Detailed sale information in the snapshot side
 * @tag Sale
 * @author Samchon
 *
 * @controller ShoppingSellerSaleSnapshotController.flip
 * @path GET /shoppings/sellers/sales/:saleId/snapshots/:id/flip
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function flip(
  connection: IConnection,
  saleId: string & tags.Format<"uuid">,
  id: string & tags.Format<"uuid">,
): Promise<flip.Output> {
  return PlainFetcher.fetch(connection, {
    ...flip.METADATA,
    template: flip.METADATA.path,
    path: flip.path(saleId, id),
  });
}
export namespace flip {
  export type Output = IShoppingSale;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/sellers/sales/:saleId/snapshots/:id/flip",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    saleId: string & tags.Format<"uuid">,
    id: string & tags.Format<"uuid">,
  ) =>
    `/shoppings/sellers/sales/${encodeURIComponent(saleId?.toString() ?? "null")}/snapshots/${encodeURIComponent(id?.toString() ?? "null")}/flip`;
}
