/**
 * @packageDocumentation
 * @module api.functional.shoppings.sellers.orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../structures/common/IPage";
import type { IShoppingOrder } from "../../../../structures/shoppings/orders/IShoppingOrder";
import { NestiaSimulator } from "../../../../utils/NestiaSimulator";

/**
 * List up every orders.
 * 
 * List up every {@link IShoppingOrder orders} with pagination.
 * 
 * If you want, you can limit the result by configuring
 * {@link IShoppingOrder.IRequest.search search condition} in the request
 * body. Also, it is possible to customize sequence order of records by
 * configuring {@link IShoppingOrder.IRequest.sort sort condition}.
 * 
 * For reference, if you are a {@link IShoppingCustomer customer}, then
 * you can list up your own orders, and it is not a matter whether the
 * order has been {@link IShoppingOrderPublish.paid_at paid} or not.
 * 
 * Otherwise you are a {@link IShoppingSeller seller} or
 * {@link IShoppingAdministrator administrator}, then you can list up
 * only paid orders. Also, in the seller case, only related
 * {@link IShoppingOrder.goods goods} would be listed up in the order.
 * 
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated orders
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingSellerOrderController.index
 * @path PATCH /shoppings/sellers/orders
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    input: index.Input,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...index.METADATA,
                  path: index.path(),
              } as const,
              input,
          );
}
export namespace index {
    export type Input = Primitive<IShoppingOrder.IRequest>;
    export type Output = Primitive<IPage<IShoppingOrder>>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/sellers/orders",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/shoppings/sellers/orders`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IShoppingOrder>> =>
        typia.random<Primitive<IPage<IShoppingOrder>>>(g);
    export const simulate = async (
        connection: IConnection,
        input: index.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Get an order info.
 * 
 * Get a detailed {@link IShoppingOrder order} information.
 * 
 * If you are not a {@link IShoppingCustomer customer}, then you can't
 * access to the order which has not been
 * {@link IShoppingOrderPublish.paid_at paid} yet. In that case,
 * 404 not found error would be thrown.
 * 
 * @param id Target order's {@link IShoppingOrder.id}
 * @returns Order info
 * @tag Order
 * @author Samchon
 * 
 * @controller ShoppingSellerOrderController.at
 * @path GET /shoppings/sellers/orders/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    id: string & Format<"uuid">,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IShoppingOrder>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/sellers/orders/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string & Format<"uuid">): string => {
        return `/shoppings/sellers/orders/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingOrder> =>
        typia.random<Primitive<IShoppingOrder>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string & Format<"uuid">,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}