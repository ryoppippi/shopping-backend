/**
 * @packageDocumentation
 * @module api.functional.shoppings.sellers.deliveries.journeys
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { IShoppingDeliveryJourney } from "../../../../../structures/shoppings/orders/IShoppingDeliveryJourney";

/**
 * Create a new journey.
 *
 * Create a new {@link IShoppingDeliveryJourney journey} of the
 * {@link IShoppingDelivery delivery}.
 *
 * This action may change the related {@link IShoppingOrderGood.state}.
 * Also, if the target journey's type is "delivering", whether the property
 * {@link IShoppingDeliveryJourney.completed_at} is null or not affects to
 * the related goods' states. If the property is not null, the state becomes
 * "arrived". Otherwise, the state becomes "delivering".
 *
 * @param deliveryId Belonged delivery's {@link IShoppingDelivery.id }
 * @param input Creation info of the journey
 * @returns Newly created journey
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingSellerDeliveryJourneyController.create
 * @path POST /shoppings/sellers/deliveries/:deliveryId/journeys
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  deliveryId: string & Format<"uuid">,
  input: IShoppingDeliveryJourney.ICreate,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(deliveryId),
    },
    input,
  );
}
export namespace create {
  export type Input = IShoppingDeliveryJourney.ICreate;
  export type Output = IShoppingDeliveryJourney;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/sellers/deliveries/:deliveryId/journeys",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = (deliveryId: string & Format<"uuid">) =>
    `/shoppings/sellers/deliveries/${encodeURIComponent(deliveryId?.toString() ?? "null")}/journeys`;
}

/**
 * Complete a journey.
 *
 * Complete a {@link IShoppingDeliveryJourney journey} of the
 * {@link IShoppingDelivery delivery}. In other words, fills the
 * {@link IShoppingDeliveryJourney.completed_at} property with current time.
 *
 * If the target journey's type is "delivering", this action may change
 * the related {@link IShoppingOrderGood.state goods' states} to be "arrived".
 *
 * @param deliveryId Belonged delivery's {@link IShoppingDelivery.id }
 * @param id Target journey's {@link IShoppingDeliveryJourney.id }
 * @param input Completion time of the journey
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingSellerDeliveryJourneyController.complete
 * @path PUT /shoppings/sellers/deliveries/:deliveryId/journeys/:id/complete
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function complete(
  connection: IConnection,
  deliveryId: string & Format<"uuid">,
  id: string & Format<"uuid">,
  input: IShoppingDeliveryJourney.IComplete,
): Promise<void> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...complete.METADATA,
      template: complete.METADATA.path,
      path: complete.path(deliveryId, id),
    },
    input,
  );
}
export namespace complete {
  export type Input = IShoppingDeliveryJourney.IComplete;

  export const METADATA = {
    method: "PUT",
    path: "/shoppings/sellers/deliveries/:deliveryId/journeys/:id/complete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    deliveryId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/sellers/deliveries/${encodeURIComponent(deliveryId?.toString() ?? "null")}/journeys/${encodeURIComponent(id?.toString() ?? "null")}/complete`;
}

/**
 * Erase a journey.
 *
 * Erase a {@link IShoppingDeliveryJourney journey} of the
 * {@link IShoppingDelivery delivery}.
 *
 * If erasing journey is the last one of the belonged delivery, this action
 * may change the related {@link IShoppingOrderGood.state}. By erasing the last
 * journey, the state rolls back to the previous.
 *
 * @param deliveryId Belonged delivery's {@link IShoppingDelivery.id }
 * @param id Target journey's {@link IShoppingDeliveryJourney.id }
 * @returns Newly created journey
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingSellerDeliveryJourneyController.erase
 * @path DELETE /shoppings/sellers/deliveries/:deliveryId/journeys/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
  connection: IConnection,
  deliveryId: string & Format<"uuid">,
  id: string & Format<"uuid">,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...erase.METADATA,
    template: erase.METADATA.path,
    path: erase.path(deliveryId, id),
  });
}
export namespace erase {
  export const METADATA = {
    method: "DELETE",
    path: "/shoppings/sellers/deliveries/:deliveryId/journeys/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (
    deliveryId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/sellers/deliveries/${encodeURIComponent(deliveryId?.toString() ?? "null")}/journeys/${encodeURIComponent(id?.toString() ?? "null")}`;
}
