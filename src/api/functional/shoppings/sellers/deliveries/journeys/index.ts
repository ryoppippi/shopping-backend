/**
 * @packageDocumentation
 * @module api.functional.shoppings.sellers.deliveries.journeys
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IShoppingDeliveryJourney } from "../../../../../structures/shoppings/orders/IShoppingDeliveryJourney";

/**
 * Create a new journey.
 *
 * Create a new {@link IShoppingDeliveryJourney journey} of the
 * {@link IShoppingDelivery delivery}.
 *
 * This action may change the related {@link IShoppingOrderGood.state }.
 * Also, if the target journey's type is "delivering", whether the property
 * {@link IShoppingDeliveryJourney.completed_at } is null or not affects to
 * the related goods' states. If the property is not null, the state becomes
 * "arrived". Otherwise, the state becomes "delivering".
 *
 * @param deliveryId Belonged delivery's {@link IShoppingDelivery.id }
 * @param input Creation info of the journey
 * @returns Newly created journey
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingSellerDeliveryJourneyController.create
 * @path POST /shoppings/sellers/deliveries/:deliveryId/journeys
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  deliveryId: string & Format<"uuid">,
  input: create.Input,
): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection, deliveryId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(deliveryId),
        },
        input,
      );
}
export namespace create {
  export type Input = Primitive<IShoppingDeliveryJourney.ICreate>;
  export type Output = Primitive<IShoppingDeliveryJourney>;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/sellers/deliveries/:deliveryId/journeys",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (deliveryId: string & Format<"uuid">) =>
    `/shoppings/sellers/deliveries/${encodeURIComponent(deliveryId ?? "null")}/journeys`;
  export const random = (g?: Partial<typia.IRandomGenerator>) =>
    typia.random<Primitive<IShoppingDeliveryJourney>>(g);
  export const simulate = (
    connection: IConnection,
    deliveryId: string & Format<"uuid">,
    input: create.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(deliveryId),
      contentType: "application/json",
    });
    assert.param("deliveryId")(() => typia.assert(deliveryId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Complete a journey.
 *
 * Complete a {@link IShoppingDeliveryJourney journey} of the
 * {@link IShoppingDelivery delivery}. In other words, fills the
 * {@link IShoppingDeliveryJourney.completed_at } property with current time.
 *
 * If the target journey's type is "delivering", this action may change
 * the related {@link IShoppingOrderGood.state goods' states} to be "arrived".
 *
 * @param deliveryId Belonged delivery's {@link IShoppingDelivery.id }
 * @param id Target journey's {@link IShoppingDeliveryJourney.id}
 * @param input Completion time of the journey
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingSellerDeliveryJourneyController.complete
 * @path PUT /shoppings/sellers/deliveries/:deliveryId/journeys/:id/complete
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function complete(
  connection: IConnection,
  deliveryId: string & Format<"uuid">,
  id: string & Format<"uuid">,
  input: complete.Input,
): Promise<void> {
  return !!connection.simulate
    ? complete.simulate(connection, deliveryId, id, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...complete.METADATA,
          path: complete.path(deliveryId, id),
        },
        input,
      );
}
export namespace complete {
  export type Input = Primitive<IShoppingDeliveryJourney.IComplete>;

  export const METADATA = {
    method: "PUT",
    path: "/shoppings/sellers/deliveries/:deliveryId/journeys/:id/complete",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    deliveryId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/sellers/deliveries/${encodeURIComponent(deliveryId ?? "null")}/journeys/${encodeURIComponent(id ?? "null")}/complete`;
  export const random = (g?: Partial<typia.IRandomGenerator>) =>
    typia.random<Primitive<void>>(g);
  export const simulate = (
    connection: IConnection,
    deliveryId: string & Format<"uuid">,
    id: string & Format<"uuid">,
    input: complete.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(deliveryId, id),
      contentType: "application/json",
    });
    assert.param("deliveryId")(() => typia.assert(deliveryId));
    assert.param("id")(() => typia.assert(id));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Erase a journey.
 *
 * Erase a {@link IShoppingDeliveryJourney journey} of the
 * {@link IShoppingDelivery delivery}.
 *
 * If erasing journey is the last one of the belonged delivery, this action
 * may change the related {@link IShoppingOrderGood.state }. By erasing the last
 * journey, the state rolls back to the previous.
 *
 * @param deliveryId Belonged delivery's {@link IShoppingDelivery.id }
 * @param id Target journey's {@link IShoppingDeliveryJourney.id}
 * @returns Newly created journey
 * @tag Order
 * @author Samchon
 *
 * @controller ShoppingSellerDeliveryJourneyController.erase
 * @path DELETE /shoppings/sellers/deliveries/:deliveryId/journeys/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
  connection: IConnection,
  deliveryId: string & Format<"uuid">,
  id: string & Format<"uuid">,
): Promise<void> {
  return !!connection.simulate
    ? erase.simulate(connection, deliveryId, id)
    : PlainFetcher.fetch(connection, {
        ...erase.METADATA,
        path: erase.path(deliveryId, id),
      });
}
export namespace erase {
  export const METADATA = {
    method: "DELETE",
    path: "/shoppings/sellers/deliveries/:deliveryId/journeys/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (
    deliveryId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ) =>
    `/shoppings/sellers/deliveries/${encodeURIComponent(deliveryId ?? "null")}/journeys/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>) =>
    typia.random<Primitive<void>>(g);
  export const simulate = (
    connection: IConnection,
    deliveryId: string & Format<"uuid">,
    id: string & Format<"uuid">,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(deliveryId, id),
      contentType: "application/json",
    });
    assert.param("deliveryId")(() => typia.assert(deliveryId));
    assert.param("id")(() => typia.assert(id));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
