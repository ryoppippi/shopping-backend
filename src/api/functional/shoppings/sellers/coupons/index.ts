/**
 * @packageDocumentation
 * @module api.functional.shoppings.sellers.coupons
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IPage } from "../../../../structures/common/IPage";
import type { IShoppingCoupon } from "../../../../structures/shoppings/coupons/IShoppingCoupon";
import { NestiaSimulator } from "../../../../utils/NestiaSimulator";

/**
 * Create a new coupon.
 * 
 * Create a new {@link IShoppingCoupon coupon} with given information.
 * 
 * By the way, if you are a {@link IShoppingSeller seller}, you have to
 * add include direction's {@link IShoppingCouponSellerCriteria } or
 * {@link IShoppingCouponSaleCriteria } condition. This is because only
 * {@link IShoppingAdministrator administrators} can create a coupon
 * which can be used throughout the market. Seller must limit the usage
 * range by his/her {@link IShoppingSale sale(s)}.
 * 
 * Of course, when adminstrator is planning to make a general coupon
 * that can be used throughout the market, the administrator must
 * get agree from the sellers who are going to be affected.
 * 
 * @param input Creation info of the coupon
 * @returns Newly created coupon
 * @tag Discount
 * @author Samchon
 * 
 * @controller ShoppingSellerCouponController.create
 * @path POST /shoppings/sellers/coupons
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
    connection: IConnection,
    input: create.Input,
): Promise<create.Output> {
    return !!connection.simulate
        ? create.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...create.METADATA,
                  path: create.path(),
              } as const,
              input,
          );
}
export namespace create {
    export type Input = Primitive<IShoppingCoupon.ICreate>;
    export type Output = Primitive<IShoppingCoupon>;

    export const METADATA = {
        method: "POST",
        path: "/shoppings/sellers/coupons",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/shoppings/sellers/coupons`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingCoupon> =>
        typia.random<Primitive<IShoppingCoupon>>(g);
    export const simulate = async (
        connection: IConnection,
        input: create.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Erase a coupon.
 * 
 * Erase a {@link IShoppingCoupon coupon} with given ID.
 * 
 * For reference, if there're some {@link IShoppingCouponTicket tickets}
 * which are already issued from the target coupon, they would not be affected.
 * Those tickets are still valid until their expration time.
 * 
 * @param id Target coupon's {@link IShoppingCoupon.id}
 * @tag Discount
 * @author Samchon
 * 
 * @controller ShoppingSellerCouponController.erase
 * @path DELETE /shoppings/sellers/coupons/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function erase(
    connection: IConnection,
    id: string,
): Promise<void> {
    return !!connection.simulate
        ? erase.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...erase.METADATA,
                  path: erase.path(id),
              } as const,
          );
}
export namespace erase {

    export const METADATA = {
        method: "DELETE",
        path: "/shoppings/sellers/coupons/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string): string => {
        return `/shoppings/sellers/coupons/${encodeURIComponent(id ?? "null")}`;
    }
    export const simulate = async (
        connection: IConnection,
        id: string,
    ): Promise<void> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
    }
}

/**
 * List up every coupons.
 * 
 * List up every {@link IShoppingCoupon coupons} with pagination.
 * 
 * If you want, you can limit the result by configuring
 * {@link IShoppingCoupon.IRequest.search search condition} in the request
 * body. Also, it is possible to customize sequence order of records by
 * configuring {@link IShoppingCoupon.IRequest.sort sort condition}.
 * 
 * For reference, if you are a {@link IShoppingCustomer customer}, then
 * only {@link IShoppingCouponTicket ticketable} coupons would be listed up.
 * Otherwise, non-ticketable coupons would also be listed up.
 * 
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated coupons
 * @tag Discount
 * @author Samchon
 * 
 * @controller ShoppingSellerCouponController.index
 * @path PATCH /shoppings/sellers/coupons
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
    connection: IConnection,
    input: index.Input,
): Promise<index.Output> {
    return !!connection.simulate
        ? index.simulate(
              connection,
              input,
          )
        : PlainFetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              {
                  ...index.METADATA,
                  path: index.path(),
              } as const,
              input,
          );
}
export namespace index {
    export type Input = Primitive<IShoppingCoupon.IRequest>;
    export type Output = Primitive<IPage<IShoppingCoupon>>;

    export const METADATA = {
        method: "PATCH",
        path: "/shoppings/sellers/coupons",
        request: {
            type: "application/json",
            encrypted: false
        },
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (): string => {
        return `/shoppings/sellers/coupons`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IPage<IShoppingCoupon>> =>
        typia.random<Primitive<IPage<IShoppingCoupon>>>(g);
    export const simulate = async (
        connection: IConnection,
        input: index.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(),
            contentType: "application/json",
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * Get a coupon info.
 * 
 * Get a {@link IShoppingCoupon coupon} information.
 * 
 * If you are a {@link IShoppingCustomer customer}, then only
 * {@link IShoppingCouponTicket ticketable} coupons are accessible. Non
 * ticketable coupons cause 410 gone error. Otherwise you are a
 * {@link IShoppingSeller seller} or {@link IShoppingAdministrator administrator},
 * non-ticketable coupons are also accessible.
 * 
 * @param id Target coupon's {@link IShoppingCoupon.id}
 * @returns Coupon info
 * @tag Discount
 * @author Samchon
 * 
 * @controller ShoppingSellerCouponController.at
 * @path GET /shoppings/sellers/coupons/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
    connection: IConnection,
    id: string,
): Promise<at.Output> {
    return !!connection.simulate
        ? at.simulate(
              connection,
              id,
          )
        : PlainFetcher.fetch(
              connection,
              {
                  ...at.METADATA,
                  path: at.path(id),
              } as const,
          );
}
export namespace at {
    export type Output = Primitive<IShoppingCoupon>;

    export const METADATA = {
        method: "GET",
        path: "/shoppings/sellers/coupons/:id",
        request: null,
        response: {
            type: "application/json",
            encrypted: false,
        },
        status: null,
    } as const;

    export const path = (id: string): string => {
        return `/shoppings/sellers/coupons/${encodeURIComponent(id ?? "null")}`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Primitive<IShoppingCoupon> =>
        typia.random<Primitive<IShoppingCoupon>>(g);
    export const simulate = async (
        connection: IConnection,
        id: string,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METADATA.method,
            host: connection.host,
            path: path(id),
            contentType: "application/json",
        });
        assert.param("id")(() => typia.assert(id));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}