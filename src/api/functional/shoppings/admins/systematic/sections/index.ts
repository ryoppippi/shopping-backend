/**
 * @packageDocumentation
 * @module api.functional.shoppings.admins.systematic.sections
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import type { Format } from "typia/lib/tags/Format";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IRecordMerge } from "../../../../../structures/common/IRecordMerge";
import type { IShoppingSection } from "../../../../../structures/shoppings/systematic/IShoppingSection";

/**
 * Create a new section.
 *
 * Create a new {@link IShoppingSection section} with given code and name.
 *
 * As section means a spatial unit of a market that handling different type
 * of products with other section, {@link IShoppingAdministrator administrator}
 * should perform this action only when a new section being required.
 *
 * @param input Creation info of the section
 * @returns Newly created section
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingAdminSystematicSectionController.create
 * @path POST /shoppings/admins/systematic/sections
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  input: IShoppingSection.ICreate,
): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
        },
        input,
      );
}
export namespace create {
  export type Input = IShoppingSection.ICreate;
  export type Output = IShoppingSection;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/admins/systematic/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/shoppings/admins/systematic/sections";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IShoppingSection => typia.random<IShoppingSection>(g);
  export const simulate = (
    connection: IConnection,
    input: IShoppingSection.ICreate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Update a section.
 *
 * Update a {@link IShoppingSection section}'s name.
 *
 * Note that, it is not possible to change the section's code. If you want to
 * to do it forcibly, then {@link create } new one and {@link merge } with it.
 *
 * @param id Target section's {@link IShoppingSection.code}
 * @param input Update info of the section
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingAdminSystematicSectionController.update
 * @path PUT /shoppings/admins/systematic/sections/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
  connection: IConnection,
  id: string & Format<"uuid">,
  input: IShoppingSection.IUpdate,
): Promise<void> {
  return !!connection.simulate
    ? update.simulate(connection, id, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...update.METADATA,
          path: update.path(id),
        },
        input,
      );
}
export namespace update {
  export type Input = IShoppingSection.IUpdate;

  export const METADATA = {
    method: "PUT",
    path: "/shoppings/admins/systematic/sections/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string & Format<"uuid">) =>
    `/shoppings/admins/systematic/sections/${encodeURIComponent(id ?? "null")}`;
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    id: string & Format<"uuid">,
    input: IShoppingSection.IUpdate,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Merge multiple sections into one.
 *
 * In this shopping mall system, it is not possible to delete a
 * {@link IShoppingSection section}, because it is a systematic entity
 * affecting to all other core entities like {@link IShoppingSale sales}.
 * Instead of deleting, you can merge multiple sections into one.
 *
 * If you specify a section to absorb others, then all of other sections
 * will be merged into the specified one. Also, subsidiary entities of
 * sections also be merged and their references also be merged cascadingly.
 *
 * @param input input Request info of the merge
 * @tag Systematic
 * @author Samchon
 *
 * @controller ShoppingAdminSystematicSectionController.merge
 * @path DELETE /shoppings/admins/systematic/sections/merge
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function merge(
  connection: IConnection,
  input: IRecordMerge,
): Promise<void> {
  return !!connection.simulate
    ? merge.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...merge.METADATA,
          path: merge.path(),
        },
        input,
      );
}
export namespace merge {
  export type Input = IRecordMerge;

  export const METADATA = {
    method: "DELETE",
    path: "/shoppings/admins/systematic/sections/merge",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/shoppings/admins/systematic/sections/merge";
  export const random = (g?: Partial<typia.IRandomGenerator>): void =>
    typia.random<void>(g);
  export const simulate = (
    connection: IConnection,
    input: IRecordMerge,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * List up every sections.
 *
 * List up every {@link IShoppingSection sections} with pagination.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingSection.IRequest.search search condition} in the request
 * body. Also, it is possible to customize sequence order of records by
 * configuring {@link IShoppingSection.IRequest.sort sort condition}.
 *
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated sections
 * @tag Section
 * @author Samchon
 *
 * @controller ShoppingAdminSystematicSectionController.index
 * @path PATCH /shoppings/admins/systematic/sections
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  input: IShoppingSection.IRequest,
): Promise<index.Output> {
  return !!connection.simulate
    ? index.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...index.METADATA,
          path: index.path(),
        },
        input,
      );
}
export namespace index {
  export type Input = IShoppingSection.IRequest;
  export type Output = IPage<IShoppingSection>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/admins/systematic/sections",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/shoppings/admins/systematic/sections";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IPage<IShoppingSection> => typia.random<IPage<IShoppingSection>>(g);
  export const simulate = (
    connection: IConnection,
    input: IShoppingSection.IRequest,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a section info.
 *
 * Get a detailed {@link IShoppingSection section} information.
 *
 * @param id Target section's {@link IShoppingSection.id}
 * @returns Detailed section info
 * @tag Section
 * @author Samchon
 *
 * @controller ShoppingAdminSystematicSectionController.at
 * @path GET /shoppings/admins/systematic/sections/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & Format<"uuid">,
): Promise<at.Output> {
  return !!connection.simulate
    ? at.simulate(connection, id)
    : PlainFetcher.fetch(connection, {
        ...at.METADATA,
        path: at.path(id),
      });
}
export namespace at {
  export type Output = IShoppingSection;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/admins/systematic/sections/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string & Format<"uuid">) =>
    `/shoppings/admins/systematic/sections/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IShoppingSection => typia.random<IShoppingSection>(g);
  export const simulate = (
    connection: IConnection,
    id: string & Format<"uuid">,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Get a section info by its code.
 *
 * Get a detailed {@link IShoppingSection section} information by its code.
 *
 * @param code Target section's {@link IShoppingSection.code}
 * @returns Detailed section info
 * @tag Section
 * @author Samchon
 *
 * @controller ShoppingAdminSystematicSectionController.get
 * @path GET /shoppings/admins/systematic/sections/:code/get
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(
  connection: IConnection,
  code: string,
): Promise<get.Output> {
  return !!connection.simulate
    ? get.simulate(connection, code)
    : PlainFetcher.fetch(connection, {
        ...get.METADATA,
        path: get.path(code),
      });
}
export namespace get {
  export type Output = IShoppingSection;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/admins/systematic/sections/:code/get",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (code: string) =>
    `/shoppings/admins/systematic/sections/${encodeURIComponent(code ?? "null")}/get`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): IShoppingSection => typia.random<IShoppingSection>(g);
  export const simulate = (connection: IConnection, code: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(code),
      contentType: "application/json",
    });
    assert.param("code")(() => typia.assert(code));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
