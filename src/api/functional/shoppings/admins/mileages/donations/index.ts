/**
 * @packageDocumentation
 * @module api.functional.shoppings.admins.mileages.donations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { tags } from "typia";

import type { IPage } from "../../../../../structures/common/IPage";
import type { IShoppingMileageDonation } from "../../../../../structures/shoppings/mileages/IShoppingMileageDonation";

/**
 * List up every mileage donation histories.
 *
 * List up every {@link IShoppingMileageDonation mileage donation histories}
 * with {@link IPage pagination}.
 *
 * If you want, you can limit the result by configuring
 * {@link IShoppingMileageDonation.IRequest.search search condition} in
 * the request body. Also, it is possible to customize sequence order of
 * records by configuring {@link IShoppingMileageDonation.IRequest.sort sort}.
 *
 * @param input Request info of pagination, searching and sorting
 * @returns Paginated mileage donation history list
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingAdminMileageDonationController.index
 * @path PATCH /shoppings/admins/mileages/donations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(
  connection: IConnection,
  input: index.Body,
): Promise<index.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...index.METADATA,
      template: index.METADATA.path,
      path: index.path(),
    },
    input,
  );
}
export namespace index {
  export type Body = IShoppingMileageDonation.IRequest;
  export type Output = IPage<IShoppingMileageDonation>;

  export const METADATA = {
    method: "PATCH",
    path: "/shoppings/admins/mileages/donations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/shoppings/admins/mileages/donations";
}

/**
 * Get a mileage donation history.
 *
 * Get a {@link IShoppingMileageDonation mileage donation history} with its ID.
 *
 * @param id Target history's {@link IShoppingMileageDonation.id }
 * @returns Mileage donation history
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingAdminMileageDonationController.at
 * @path GET /shoppings/admins/mileages/donations/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function at(
  connection: IConnection,
  id: string & tags.Format<"uuid">,
): Promise<at.Output> {
  return PlainFetcher.fetch(connection, {
    ...at.METADATA,
    template: at.METADATA.path,
    path: at.path(id),
  });
}
export namespace at {
  export type Output = IShoppingMileageDonation;

  export const METADATA = {
    method: "GET",
    path: "/shoppings/admins/mileages/donations/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string & tags.Format<"uuid">) =>
    `/shoppings/admins/mileages/donations/${encodeURIComponent(id?.toString() ?? "null")}`;
}

/**
 * Donate a mileage to a citizen.
 *
 * Donate a mileage to a specific {@link IShoppingCitizen citizen} from
 * current {@link IShoppingAdministrator administrator}, with detailed
 * reason why.
 *
 * Note that, as donating mileage affects to the citizen's balance and
 * current shopping mall's operating profit, administrator must archive
 * the detailed reason why the mileage is donated.
 *
 * @param input Request info of mileage donation
 * @returns Mileage donation history
 * @tag Discount
 * @author Samchon
 *
 * @controller ShoppingAdminMileageDonationController.create
 * @path POST /shoppings/admins/mileages/donations
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  input: create.Body,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    input,
  );
}
export namespace create {
  export type Body = IShoppingMileageDonation.ICreate;
  export type Output = IShoppingMileageDonation;

  export const METADATA = {
    method: "POST",
    path: "/shoppings/admins/mileages/donations",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/shoppings/admins/mileages/donations";
}
