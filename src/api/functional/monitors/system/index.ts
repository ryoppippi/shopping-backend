/**
 * @packageDocumentation
 * @module api.functional.monitors.system
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ISystem } from "../../../structures/monitors/ISystem";

/**
 * Get system information.
 *
 * Get system information with commit and package information.
 *
 * As such information is a type of sensitive, response be encrypted.
 *
 * @returns System info
 * @tag Monitor
 * @author Samchon
 *
 * @controller MonitorSystemController.get
 * @path GET /monitors/system
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function get(connection: IConnection): Promise<get.Output> {
  return PlainFetcher.fetch(connection, {
    ...get.METADATA,
    template: get.METADATA.path,
    path: get.path(),
  });
}
export namespace get {
  export type Output = ISystem;

  export const METADATA = {
    method: "GET",
    path: "/monitors/system",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/monitors/system";
}

/**
 * @internal
 * @controller MonitorSystemController.internal_server_error
 * @path GET /monitors/system/internal_server_error
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function internal_server_error(
  connection: IConnection,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...internal_server_error.METADATA,
    template: internal_server_error.METADATA.path,
    path: internal_server_error.path(),
  });
}
export namespace internal_server_error {
  export const METADATA = {
    method: "GET",
    path: "/monitors/system/internal_server_error",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/monitors/system/internal_server_error";
}

/**
 * @internal
 * @controller MonitorSystemController.uncaught_exception
 * @path GET /monitors/system/uncaught_exception
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function uncaught_exception(
  connection: IConnection,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...uncaught_exception.METADATA,
    template: uncaught_exception.METADATA.path,
    path: uncaught_exception.path(),
  });
}
export namespace uncaught_exception {
  export const METADATA = {
    method: "GET",
    path: "/monitors/system/uncaught_exception",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/monitors/system/uncaught_exception";
}
